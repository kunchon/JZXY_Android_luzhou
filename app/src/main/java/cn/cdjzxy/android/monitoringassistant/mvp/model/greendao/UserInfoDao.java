package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.user.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, String> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property LoginName = new Property(1, String.class, "LoginName", false, "LOGIN_NAME");
        public final static Property WorkNo = new Property(2, String.class, "WorkNo", false, "WORK_NO");
        public final static Property Name = new Property(3, String.class, "Name", false, "NAME");
        public final static Property Sex = new Property(4, String.class, "Sex", false, "SEX");
        public final static Property Brithdate = new Property(5, String.class, "Brithdate", false, "BRITHDATE");
        public final static Property IdentityCode = new Property(6, String.class, "IdentityCode", false, "IDENTITY_CODE");
        public final static Property Mobile = new Property(7, String.class, "Mobile", false, "MOBILE");
        public final static Property DepartmentName = new Property(8, String.class, "DepartmentName", false, "DEPARTMENT_NAME");
        public final static Property Position = new Property(9, String.class, "Position", false, "POSITION");
        public final static Property ReportSite = new Property(10, String.class, "ReportSite", false, "REPORT_SITE");
        public final static Property Nation = new Property(11, String.class, "Nation", false, "NATION");
        public final static Property Province = new Property(12, String.class, "Province", false, "PROVINCE");
        public final static Property City = new Property(13, String.class, "City", false, "CITY");
        public final static Property Country = new Property(14, String.class, "Country", false, "COUNTRY");
        public final static Property Dgree = new Property(15, String.class, "Dgree", false, "DGREE");
        public final static Property Major = new Property(16, String.class, "Major", false, "MAJOR");
        public final static Property School = new Property(17, String.class, "School", false, "SCHOOL");
        public final static Property PoliticsStatus = new Property(18, String.class, "PoliticsStatus", false, "POLITICS_STATUS");
        public final static Property JobType = new Property(19, String.class, "JobType", false, "JOB_TYPE");
        public final static Property ProfessionalTitle = new Property(20, String.class, "ProfessionalTitle", false, "PROFESSIONAL_TITLE");
        public final static Property Token = new Property(21, String.class, "Token", false, "TOKEN");
        public final static Property WebUrl = new Property(22, String.class, "WebUrl", false, "WEB_URL");
        public final static Property Pwd = new Property(23, String.class, "pwd", false, "PWD");
        public final static Property IntId = new Property(24, int.class, "intId", false, "INT_ID");
        public final static Property AppRightStr = new Property(25, String.class, "AppRightStr", false, "APP_RIGHT_STR");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"LOGIN_NAME\" TEXT," + // 1: LoginName
                "\"WORK_NO\" TEXT," + // 2: WorkNo
                "\"NAME\" TEXT," + // 3: Name
                "\"SEX\" TEXT," + // 4: Sex
                "\"BRITHDATE\" TEXT," + // 5: Brithdate
                "\"IDENTITY_CODE\" TEXT," + // 6: IdentityCode
                "\"MOBILE\" TEXT," + // 7: Mobile
                "\"DEPARTMENT_NAME\" TEXT," + // 8: DepartmentName
                "\"POSITION\" TEXT," + // 9: Position
                "\"REPORT_SITE\" TEXT," + // 10: ReportSite
                "\"NATION\" TEXT," + // 11: Nation
                "\"PROVINCE\" TEXT," + // 12: Province
                "\"CITY\" TEXT," + // 13: City
                "\"COUNTRY\" TEXT," + // 14: Country
                "\"DGREE\" TEXT," + // 15: Dgree
                "\"MAJOR\" TEXT," + // 16: Major
                "\"SCHOOL\" TEXT," + // 17: School
                "\"POLITICS_STATUS\" TEXT," + // 18: PoliticsStatus
                "\"JOB_TYPE\" TEXT," + // 19: JobType
                "\"PROFESSIONAL_TITLE\" TEXT," + // 20: ProfessionalTitle
                "\"TOKEN\" TEXT," + // 21: Token
                "\"WEB_URL\" TEXT," + // 22: WebUrl
                "\"PWD\" TEXT," + // 23: pwd
                "\"INT_ID\" INTEGER NOT NULL ," + // 24: intId
                "\"APP_RIGHT_STR\" TEXT);"); // 25: AppRightStr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String LoginName = entity.getLoginName();
        if (LoginName != null) {
            stmt.bindString(2, LoginName);
        }
 
        String WorkNo = entity.getWorkNo();
        if (WorkNo != null) {
            stmt.bindString(3, WorkNo);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(4, Name);
        }
 
        String Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindString(5, Sex);
        }
 
        String Brithdate = entity.getBrithdate();
        if (Brithdate != null) {
            stmt.bindString(6, Brithdate);
        }
 
        String IdentityCode = entity.getIdentityCode();
        if (IdentityCode != null) {
            stmt.bindString(7, IdentityCode);
        }
 
        String Mobile = entity.getMobile();
        if (Mobile != null) {
            stmt.bindString(8, Mobile);
        }
 
        String DepartmentName = entity.getDepartmentName();
        if (DepartmentName != null) {
            stmt.bindString(9, DepartmentName);
        }
 
        String Position = entity.getPosition();
        if (Position != null) {
            stmt.bindString(10, Position);
        }
 
        String ReportSite = entity.getReportSite();
        if (ReportSite != null) {
            stmt.bindString(11, ReportSite);
        }
 
        String Nation = entity.getNation();
        if (Nation != null) {
            stmt.bindString(12, Nation);
        }
 
        String Province = entity.getProvince();
        if (Province != null) {
            stmt.bindString(13, Province);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(14, City);
        }
 
        String Country = entity.getCountry();
        if (Country != null) {
            stmt.bindString(15, Country);
        }
 
        String Dgree = entity.getDgree();
        if (Dgree != null) {
            stmt.bindString(16, Dgree);
        }
 
        String Major = entity.getMajor();
        if (Major != null) {
            stmt.bindString(17, Major);
        }
 
        String School = entity.getSchool();
        if (School != null) {
            stmt.bindString(18, School);
        }
 
        String PoliticsStatus = entity.getPoliticsStatus();
        if (PoliticsStatus != null) {
            stmt.bindString(19, PoliticsStatus);
        }
 
        String JobType = entity.getJobType();
        if (JobType != null) {
            stmt.bindString(20, JobType);
        }
 
        String ProfessionalTitle = entity.getProfessionalTitle();
        if (ProfessionalTitle != null) {
            stmt.bindString(21, ProfessionalTitle);
        }
 
        String Token = entity.getToken();
        if (Token != null) {
            stmt.bindString(22, Token);
        }
 
        String WebUrl = entity.getWebUrl();
        if (WebUrl != null) {
            stmt.bindString(23, WebUrl);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(24, pwd);
        }
        stmt.bindLong(25, entity.getIntId());
 
        String AppRightStr = entity.getAppRightStr();
        if (AppRightStr != null) {
            stmt.bindString(26, AppRightStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String LoginName = entity.getLoginName();
        if (LoginName != null) {
            stmt.bindString(2, LoginName);
        }
 
        String WorkNo = entity.getWorkNo();
        if (WorkNo != null) {
            stmt.bindString(3, WorkNo);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(4, Name);
        }
 
        String Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindString(5, Sex);
        }
 
        String Brithdate = entity.getBrithdate();
        if (Brithdate != null) {
            stmt.bindString(6, Brithdate);
        }
 
        String IdentityCode = entity.getIdentityCode();
        if (IdentityCode != null) {
            stmt.bindString(7, IdentityCode);
        }
 
        String Mobile = entity.getMobile();
        if (Mobile != null) {
            stmt.bindString(8, Mobile);
        }
 
        String DepartmentName = entity.getDepartmentName();
        if (DepartmentName != null) {
            stmt.bindString(9, DepartmentName);
        }
 
        String Position = entity.getPosition();
        if (Position != null) {
            stmt.bindString(10, Position);
        }
 
        String ReportSite = entity.getReportSite();
        if (ReportSite != null) {
            stmt.bindString(11, ReportSite);
        }
 
        String Nation = entity.getNation();
        if (Nation != null) {
            stmt.bindString(12, Nation);
        }
 
        String Province = entity.getProvince();
        if (Province != null) {
            stmt.bindString(13, Province);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(14, City);
        }
 
        String Country = entity.getCountry();
        if (Country != null) {
            stmt.bindString(15, Country);
        }
 
        String Dgree = entity.getDgree();
        if (Dgree != null) {
            stmt.bindString(16, Dgree);
        }
 
        String Major = entity.getMajor();
        if (Major != null) {
            stmt.bindString(17, Major);
        }
 
        String School = entity.getSchool();
        if (School != null) {
            stmt.bindString(18, School);
        }
 
        String PoliticsStatus = entity.getPoliticsStatus();
        if (PoliticsStatus != null) {
            stmt.bindString(19, PoliticsStatus);
        }
 
        String JobType = entity.getJobType();
        if (JobType != null) {
            stmt.bindString(20, JobType);
        }
 
        String ProfessionalTitle = entity.getProfessionalTitle();
        if (ProfessionalTitle != null) {
            stmt.bindString(21, ProfessionalTitle);
        }
 
        String Token = entity.getToken();
        if (Token != null) {
            stmt.bindString(22, Token);
        }
 
        String WebUrl = entity.getWebUrl();
        if (WebUrl != null) {
            stmt.bindString(23, WebUrl);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(24, pwd);
        }
        stmt.bindLong(25, entity.getIntId());
 
        String AppRightStr = entity.getAppRightStr();
        if (AppRightStr != null) {
            stmt.bindString(26, AppRightStr);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LoginName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // WorkNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Brithdate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // IdentityCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Mobile
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // DepartmentName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Position
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ReportSite
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Nation
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Province
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // City
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Country
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Dgree
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // Major
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // School
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // PoliticsStatus
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // JobType
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // ProfessionalTitle
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Token
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // WebUrl
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // pwd
            cursor.getInt(offset + 24), // intId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // AppRightStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLoginName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWorkNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBrithdate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIdentityCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDepartmentName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPosition(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReportSite(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProvince(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCity(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCountry(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDgree(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMajor(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSchool(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPoliticsStatus(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setJobType(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setProfessionalTitle(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setToken(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setWebUrl(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPwd(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setIntId(cursor.getInt(offset + 24));
        entity.setAppRightStr(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
