package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.base.Enterprise;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTERPRISE".
*/
public class EnterpriseDao extends AbstractDao<Enterprise, String> {

    public static final String TABLENAME = "ENTERPRISE";

    /**
     * Properties of entity Enterprise.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Division = new Property(2, String.class, "Division", false, "DIVISION");
        public final static Property DetailAddress = new Property(3, String.class, "DetailAddress", false, "DETAIL_ADDRESS");
        public final static Property LegalName = new Property(4, String.class, "LegalName", false, "LEGAL_NAME");
        public final static Property PhoneNum = new Property(5, String.class, "PhoneNum", false, "PHONE_NUM");
        public final static Property Longitude = new Property(6, String.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(7, String.class, "Latitude", false, "LATITUDE");
        public final static Property UpdateTime = new Property(8, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property RawMaterial = new Property(9, String.class, "RawMaterial", false, "RAW_MATERIAL");
        public final static Property Product = new Property(10, String.class, "Product", false, "PRODUCT");
        public final static Property ProductiveTechnology = new Property(11, String.class, "ProductiveTechnology", false, "PRODUCTIVE_TECHNOLOGY");
        public final static Property Profile = new Property(12, String.class, "Profile", false, "PROFILE");
        public final static Property MainAuxiliary = new Property(13, String.class, "MainAuxiliary", false, "MAIN_AUXILIARY");
        public final static Property PollutionSolveTech = new Property(14, String.class, "PollutionSolveTech", false, "POLLUTION_SOLVE_TECH");
        public final static Property EnterprisePollutionResult = new Property(15, String.class, "enterprisePollutionResult", false, "ENTERPRISE_POLLUTION_RESULT");
    }


    public EnterpriseDao(DaoConfig config) {
        super(config);
    }
    
    public EnterpriseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTERPRISE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"NAME\" TEXT," + // 1: Name
                "\"DIVISION\" TEXT," + // 2: Division
                "\"DETAIL_ADDRESS\" TEXT," + // 3: DetailAddress
                "\"LEGAL_NAME\" TEXT," + // 4: LegalName
                "\"PHONE_NUM\" TEXT," + // 5: PhoneNum
                "\"LONGITUDE\" TEXT," + // 6: Longitude
                "\"LATITUDE\" TEXT," + // 7: Latitude
                "\"UPDATE_TIME\" TEXT," + // 8: UpdateTime
                "\"RAW_MATERIAL\" TEXT," + // 9: RawMaterial
                "\"PRODUCT\" TEXT," + // 10: Product
                "\"PRODUCTIVE_TECHNOLOGY\" TEXT," + // 11: ProductiveTechnology
                "\"PROFILE\" TEXT," + // 12: Profile
                "\"MAIN_AUXILIARY\" TEXT," + // 13: MainAuxiliary
                "\"POLLUTION_SOLVE_TECH\" TEXT," + // 14: PollutionSolveTech
                "\"ENTERPRISE_POLLUTION_RESULT\" TEXT);"); // 15: enterprisePollutionResult
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTERPRISE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Enterprise entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Division = entity.getDivision();
        if (Division != null) {
            stmt.bindString(3, Division);
        }
 
        String DetailAddress = entity.getDetailAddress();
        if (DetailAddress != null) {
            stmt.bindString(4, DetailAddress);
        }
 
        String LegalName = entity.getLegalName();
        if (LegalName != null) {
            stmt.bindString(5, LegalName);
        }
 
        String PhoneNum = entity.getPhoneNum();
        if (PhoneNum != null) {
            stmt.bindString(6, PhoneNum);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(7, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(8, Latitude);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(9, UpdateTime);
        }
 
        String RawMaterial = entity.getRawMaterial();
        if (RawMaterial != null) {
            stmt.bindString(10, RawMaterial);
        }
 
        String Product = entity.getProduct();
        if (Product != null) {
            stmt.bindString(11, Product);
        }
 
        String ProductiveTechnology = entity.getProductiveTechnology();
        if (ProductiveTechnology != null) {
            stmt.bindString(12, ProductiveTechnology);
        }
 
        String Profile = entity.getProfile();
        if (Profile != null) {
            stmt.bindString(13, Profile);
        }
 
        String MainAuxiliary = entity.getMainAuxiliary();
        if (MainAuxiliary != null) {
            stmt.bindString(14, MainAuxiliary);
        }
 
        String PollutionSolveTech = entity.getPollutionSolveTech();
        if (PollutionSolveTech != null) {
            stmt.bindString(15, PollutionSolveTech);
        }
 
        String enterprisePollutionResult = entity.getEnterprisePollutionResult();
        if (enterprisePollutionResult != null) {
            stmt.bindString(16, enterprisePollutionResult);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Enterprise entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Division = entity.getDivision();
        if (Division != null) {
            stmt.bindString(3, Division);
        }
 
        String DetailAddress = entity.getDetailAddress();
        if (DetailAddress != null) {
            stmt.bindString(4, DetailAddress);
        }
 
        String LegalName = entity.getLegalName();
        if (LegalName != null) {
            stmt.bindString(5, LegalName);
        }
 
        String PhoneNum = entity.getPhoneNum();
        if (PhoneNum != null) {
            stmt.bindString(6, PhoneNum);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(7, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(8, Latitude);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(9, UpdateTime);
        }
 
        String RawMaterial = entity.getRawMaterial();
        if (RawMaterial != null) {
            stmt.bindString(10, RawMaterial);
        }
 
        String Product = entity.getProduct();
        if (Product != null) {
            stmt.bindString(11, Product);
        }
 
        String ProductiveTechnology = entity.getProductiveTechnology();
        if (ProductiveTechnology != null) {
            stmt.bindString(12, ProductiveTechnology);
        }
 
        String Profile = entity.getProfile();
        if (Profile != null) {
            stmt.bindString(13, Profile);
        }
 
        String MainAuxiliary = entity.getMainAuxiliary();
        if (MainAuxiliary != null) {
            stmt.bindString(14, MainAuxiliary);
        }
 
        String PollutionSolveTech = entity.getPollutionSolveTech();
        if (PollutionSolveTech != null) {
            stmt.bindString(15, PollutionSolveTech);
        }
 
        String enterprisePollutionResult = entity.getEnterprisePollutionResult();
        if (enterprisePollutionResult != null) {
            stmt.bindString(16, enterprisePollutionResult);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Enterprise readEntity(Cursor cursor, int offset) {
        Enterprise entity = new Enterprise( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Division
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DetailAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // LegalName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PhoneNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Longitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Latitude
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // UpdateTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // RawMaterial
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Product
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ProductiveTechnology
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Profile
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // MainAuxiliary
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // PollutionSolveTech
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // enterprisePollutionResult
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Enterprise entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDivision(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDetailAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLegalName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoneNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLongitude(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLatitude(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRawMaterial(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProduct(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProductiveTechnology(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProfile(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMainAuxiliary(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPollutionSolveTech(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEnterprisePollutionResult(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Enterprise entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Enterprise entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Enterprise entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
