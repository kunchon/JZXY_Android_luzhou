package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.sampling.Table;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE".
*/
public class TableDao extends AbstractDao<Table, String> {

    public static final String TABLENAME = "TABLE";

    /**
     * Properties of entity Table.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property ProjectId = new Property(1, String.class, "ProjectId", false, "PROJECT_ID");
        public final static Property ProjectName = new Property(2, String.class, "ProjectName", false, "PROJECT_NAME");
        public final static Property Montype = new Property(3, String.class, "montype", false, "MONTYPE");
        public final static Property SamplingNo = new Property(4, String.class, "SamplingNo", false, "SAMPLING_NO");
        public final static Property FormName = new Property(5, String.class, "FormName", false, "FORM_NAME");
        public final static Property ParentTagId = new Property(6, String.class, "ParentTagId", false, "PARENT_TAG_ID");
        public final static Property TagId = new Property(7, String.class, "TagId", false, "TAG_ID");
        public final static Property TagName = new Property(8, String.class, "TagName", false, "TAG_NAME");
        public final static Property AddressId = new Property(9, String.class, "AddressId", false, "ADDRESS_ID");
        public final static Property AddressName = new Property(10, String.class, "AddressName", false, "ADDRESS_NAME");
        public final static Property SamplingUserId = new Property(11, String.class, "SamplingUserId", false, "SAMPLING_USER_ID");
        public final static Property SamplingUserName = new Property(12, String.class, "SamplingUserName", false, "SAMPLING_USER_NAME");
        public final static Property SubmitId = new Property(13, String.class, "SubmitId", false, "SUBMIT_ID");
        public final static Property SubmitName = new Property(14, String.class, "SubmitName", false, "SUBMIT_NAME");
        public final static Property SamplingTimeBegin = new Property(15, String.class, "SamplingTimeBegin", false, "SAMPLING_TIME_BEGIN");
        public final static Property SamplingTimeEnd = new Property(16, String.class, "SamplingTimeEnd", false, "SAMPLING_TIME_END");
        public final static Property Status = new Property(17, int.class, "Status", false, "STATUS");
        public final static Property StatusName = new Property(18, String.class, "StatusName", false, "STATUS_NAME");
        public final static Property UpdateTime = new Property(19, String.class, "UpdateTime", false, "UPDATE_TIME");
    }


    public TableDao(DaoConfig config) {
        super(config);
    }
    
    public TableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"PROJECT_ID\" TEXT," + // 1: ProjectId
                "\"PROJECT_NAME\" TEXT," + // 2: ProjectName
                "\"MONTYPE\" TEXT," + // 3: montype
                "\"SAMPLING_NO\" TEXT," + // 4: SamplingNo
                "\"FORM_NAME\" TEXT," + // 5: FormName
                "\"PARENT_TAG_ID\" TEXT," + // 6: ParentTagId
                "\"TAG_ID\" TEXT," + // 7: TagId
                "\"TAG_NAME\" TEXT," + // 8: TagName
                "\"ADDRESS_ID\" TEXT," + // 9: AddressId
                "\"ADDRESS_NAME\" TEXT," + // 10: AddressName
                "\"SAMPLING_USER_ID\" TEXT," + // 11: SamplingUserId
                "\"SAMPLING_USER_NAME\" TEXT," + // 12: SamplingUserName
                "\"SUBMIT_ID\" TEXT," + // 13: SubmitId
                "\"SUBMIT_NAME\" TEXT," + // 14: SubmitName
                "\"SAMPLING_TIME_BEGIN\" TEXT," + // 15: SamplingTimeBegin
                "\"SAMPLING_TIME_END\" TEXT," + // 16: SamplingTimeEnd
                "\"STATUS\" INTEGER NOT NULL ," + // 17: Status
                "\"STATUS_NAME\" TEXT," + // 18: StatusName
                "\"UPDATE_TIME\" TEXT);"); // 19: UpdateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Table entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String ProjectId = entity.getProjectId();
        if (ProjectId != null) {
            stmt.bindString(2, ProjectId);
        }
 
        String ProjectName = entity.getProjectName();
        if (ProjectName != null) {
            stmt.bindString(3, ProjectName);
        }
 
        String montype = entity.getMontype();
        if (montype != null) {
            stmt.bindString(4, montype);
        }
 
        String SamplingNo = entity.getSamplingNo();
        if (SamplingNo != null) {
            stmt.bindString(5, SamplingNo);
        }
 
        String FormName = entity.getFormName();
        if (FormName != null) {
            stmt.bindString(6, FormName);
        }
 
        String ParentTagId = entity.getParentTagId();
        if (ParentTagId != null) {
            stmt.bindString(7, ParentTagId);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(8, TagId);
        }
 
        String TagName = entity.getTagName();
        if (TagName != null) {
            stmt.bindString(9, TagName);
        }
 
        String AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindString(10, AddressId);
        }
 
        String AddressName = entity.getAddressName();
        if (AddressName != null) {
            stmt.bindString(11, AddressName);
        }
 
        String SamplingUserId = entity.getSamplingUserId();
        if (SamplingUserId != null) {
            stmt.bindString(12, SamplingUserId);
        }
 
        String SamplingUserName = entity.getSamplingUserName();
        if (SamplingUserName != null) {
            stmt.bindString(13, SamplingUserName);
        }
 
        String SubmitId = entity.getSubmitId();
        if (SubmitId != null) {
            stmt.bindString(14, SubmitId);
        }
 
        String SubmitName = entity.getSubmitName();
        if (SubmitName != null) {
            stmt.bindString(15, SubmitName);
        }
 
        String SamplingTimeBegin = entity.getSamplingTimeBegin();
        if (SamplingTimeBegin != null) {
            stmt.bindString(16, SamplingTimeBegin);
        }
 
        String SamplingTimeEnd = entity.getSamplingTimeEnd();
        if (SamplingTimeEnd != null) {
            stmt.bindString(17, SamplingTimeEnd);
        }
        stmt.bindLong(18, entity.getStatus());
 
        String StatusName = entity.getStatusName();
        if (StatusName != null) {
            stmt.bindString(19, StatusName);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(20, UpdateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Table entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String ProjectId = entity.getProjectId();
        if (ProjectId != null) {
            stmt.bindString(2, ProjectId);
        }
 
        String ProjectName = entity.getProjectName();
        if (ProjectName != null) {
            stmt.bindString(3, ProjectName);
        }
 
        String montype = entity.getMontype();
        if (montype != null) {
            stmt.bindString(4, montype);
        }
 
        String SamplingNo = entity.getSamplingNo();
        if (SamplingNo != null) {
            stmt.bindString(5, SamplingNo);
        }
 
        String FormName = entity.getFormName();
        if (FormName != null) {
            stmt.bindString(6, FormName);
        }
 
        String ParentTagId = entity.getParentTagId();
        if (ParentTagId != null) {
            stmt.bindString(7, ParentTagId);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(8, TagId);
        }
 
        String TagName = entity.getTagName();
        if (TagName != null) {
            stmt.bindString(9, TagName);
        }
 
        String AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindString(10, AddressId);
        }
 
        String AddressName = entity.getAddressName();
        if (AddressName != null) {
            stmt.bindString(11, AddressName);
        }
 
        String SamplingUserId = entity.getSamplingUserId();
        if (SamplingUserId != null) {
            stmt.bindString(12, SamplingUserId);
        }
 
        String SamplingUserName = entity.getSamplingUserName();
        if (SamplingUserName != null) {
            stmt.bindString(13, SamplingUserName);
        }
 
        String SubmitId = entity.getSubmitId();
        if (SubmitId != null) {
            stmt.bindString(14, SubmitId);
        }
 
        String SubmitName = entity.getSubmitName();
        if (SubmitName != null) {
            stmt.bindString(15, SubmitName);
        }
 
        String SamplingTimeBegin = entity.getSamplingTimeBegin();
        if (SamplingTimeBegin != null) {
            stmt.bindString(16, SamplingTimeBegin);
        }
 
        String SamplingTimeEnd = entity.getSamplingTimeEnd();
        if (SamplingTimeEnd != null) {
            stmt.bindString(17, SamplingTimeEnd);
        }
        stmt.bindLong(18, entity.getStatus());
 
        String StatusName = entity.getStatusName();
        if (StatusName != null) {
            stmt.bindString(19, StatusName);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(20, UpdateTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Table readEntity(Cursor cursor, int offset) {
        Table entity = new Table( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ProjectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ProjectName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // montype
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SamplingNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FormName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ParentTagId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // TagId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // TagName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // AddressId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // AddressName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // SamplingUserId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // SamplingUserName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // SubmitId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // SubmitName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // SamplingTimeBegin
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // SamplingTimeEnd
            cursor.getInt(offset + 17), // Status
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // StatusName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // UpdateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Table entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProjectName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMontype(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSamplingNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFormName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setParentTagId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTagId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTagName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddressId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddressName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSamplingUserId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSamplingUserName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSubmitId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSubmitName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSamplingTimeBegin(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSamplingTimeEnd(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStatus(cursor.getInt(offset + 17));
        entity.setStatusName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUpdateTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Table entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Table entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Table entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
