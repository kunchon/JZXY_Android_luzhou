package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.sampling.FormSelect;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORM_SELECT".
*/
public class FormSelectDao extends AbstractDao<FormSelect, Void> {

    public static final String TABLENAME = "FORM_SELECT";

    /**
     * Properties of entity FormSelect.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FormId = new Property(0, String.class, "FormId", false, "FORM_ID");
        public final static Property FormCode = new Property(1, String.class, "FormCode", false, "FORM_CODE");
        public final static Property FormName = new Property(2, String.class, "FormName", false, "FORM_NAME");
        public final static Property TagParentId = new Property(3, String.class, "TagParentId", false, "TAG_PARENT_ID");
        public final static Property TagId = new Property(4, String.class, "TagId", false, "TAG_ID");
        public final static Property Path = new Property(5, String.class, "Path", false, "PATH");
    }


    public FormSelectDao(DaoConfig config) {
        super(config);
    }
    
    public FormSelectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORM_SELECT\" (" + //
                "\"FORM_ID\" TEXT," + // 0: FormId
                "\"FORM_CODE\" TEXT," + // 1: FormCode
                "\"FORM_NAME\" TEXT," + // 2: FormName
                "\"TAG_PARENT_ID\" TEXT," + // 3: TagParentId
                "\"TAG_ID\" TEXT," + // 4: TagId
                "\"PATH\" TEXT);"); // 5: Path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORM_SELECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FormSelect entity) {
        stmt.clearBindings();
 
        String FormId = entity.getFormId();
        if (FormId != null) {
            stmt.bindString(1, FormId);
        }
 
        String FormCode = entity.getFormCode();
        if (FormCode != null) {
            stmt.bindString(2, FormCode);
        }
 
        String FormName = entity.getFormName();
        if (FormName != null) {
            stmt.bindString(3, FormName);
        }
 
        String TagParentId = entity.getTagParentId();
        if (TagParentId != null) {
            stmt.bindString(4, TagParentId);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(5, TagId);
        }
 
        String Path = entity.getPath();
        if (Path != null) {
            stmt.bindString(6, Path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FormSelect entity) {
        stmt.clearBindings();
 
        String FormId = entity.getFormId();
        if (FormId != null) {
            stmt.bindString(1, FormId);
        }
 
        String FormCode = entity.getFormCode();
        if (FormCode != null) {
            stmt.bindString(2, FormCode);
        }
 
        String FormName = entity.getFormName();
        if (FormName != null) {
            stmt.bindString(3, FormName);
        }
 
        String TagParentId = entity.getTagParentId();
        if (TagParentId != null) {
            stmt.bindString(4, TagParentId);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(5, TagId);
        }
 
        String Path = entity.getPath();
        if (Path != null) {
            stmt.bindString(6, Path);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FormSelect readEntity(Cursor cursor, int offset) {
        FormSelect entity = new FormSelect( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FormId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FormCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FormName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TagParentId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TagId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FormSelect entity, int offset) {
        entity.setFormId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFormCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFormName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTagParentId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTagId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FormSelect entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FormSelect entity) {
        return null;
    }

    @Override
    public boolean hasKey(FormSelect entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
