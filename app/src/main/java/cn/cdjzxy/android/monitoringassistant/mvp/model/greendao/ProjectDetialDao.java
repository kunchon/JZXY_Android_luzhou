package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.project.ProjectDetial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_DETIAL".
*/
public class ProjectDetialDao extends AbstractDao<ProjectDetial, String> {

    public static final String TABLENAME = "PROJECT_DETIAL";

    /**
     * Properties of entity ProjectDetial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property ProjectId = new Property(1, String.class, "ProjectId", false, "PROJECT_ID");
        public final static Property UpdateTime = new Property(2, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property TagId = new Property(3, String.class, "TagId", false, "TAG_ID");
        public final static Property TagName = new Property(4, String.class, "TagName", false, "TAG_NAME");
        public final static Property MonItemId = new Property(5, String.class, "MonItemId", false, "MON_ITEM_ID");
        public final static Property MethodId = new Property(6, String.class, "MethodId", false, "METHOD_ID");
        public final static Property AddressId = new Property(7, String.class, "AddressId", false, "ADDRESS_ID");
        public final static Property Address = new Property(8, String.class, "Address", false, "ADDRESS");
        public final static Property Comment = new Property(9, String.class, "Comment", false, "COMMENT");
        public final static Property MonItemName = new Property(10, String.class, "MonItemName", false, "MON_ITEM_NAME");
        public final static Property MethodName = new Property(11, String.class, "MethodName", false, "METHOD_NAME");
        public final static Property Days = new Property(12, int.class, "Days", false, "DAYS");
        public final static Property Period = new Property(13, int.class, "Period", false, "PERIOD");
        public final static Property ProjectContentId = new Property(14, String.class, "ProjectContentId", false, "PROJECT_CONTENT_ID");
        public final static Property TagParentId = new Property(15, String.class, "TagParentId", false, "TAG_PARENT_ID");
        public final static Property TagParentName = new Property(16, String.class, "TagParentName", false, "TAG_PARENT_NAME");
    }


    public ProjectDetialDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectDetialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_DETIAL\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"PROJECT_ID\" TEXT," + // 1: ProjectId
                "\"UPDATE_TIME\" TEXT," + // 2: UpdateTime
                "\"TAG_ID\" TEXT," + // 3: TagId
                "\"TAG_NAME\" TEXT," + // 4: TagName
                "\"MON_ITEM_ID\" TEXT," + // 5: MonItemId
                "\"METHOD_ID\" TEXT," + // 6: MethodId
                "\"ADDRESS_ID\" TEXT," + // 7: AddressId
                "\"ADDRESS\" TEXT," + // 8: Address
                "\"COMMENT\" TEXT," + // 9: Comment
                "\"MON_ITEM_NAME\" TEXT," + // 10: MonItemName
                "\"METHOD_NAME\" TEXT," + // 11: MethodName
                "\"DAYS\" INTEGER NOT NULL ," + // 12: Days
                "\"PERIOD\" INTEGER NOT NULL ," + // 13: Period
                "\"PROJECT_CONTENT_ID\" TEXT," + // 14: ProjectContentId
                "\"TAG_PARENT_ID\" TEXT," + // 15: TagParentId
                "\"TAG_PARENT_NAME\" TEXT);"); // 16: TagParentName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_DETIAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectDetial entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String ProjectId = entity.getProjectId();
        if (ProjectId != null) {
            stmt.bindString(2, ProjectId);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(3, UpdateTime);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(4, TagId);
        }
 
        String TagName = entity.getTagName();
        if (TagName != null) {
            stmt.bindString(5, TagName);
        }
 
        String MonItemId = entity.getMonItemId();
        if (MonItemId != null) {
            stmt.bindString(6, MonItemId);
        }
 
        String MethodId = entity.getMethodId();
        if (MethodId != null) {
            stmt.bindString(7, MethodId);
        }
 
        String AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindString(8, AddressId);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(9, Address);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(10, Comment);
        }
 
        String MonItemName = entity.getMonItemName();
        if (MonItemName != null) {
            stmt.bindString(11, MonItemName);
        }
 
        String MethodName = entity.getMethodName();
        if (MethodName != null) {
            stmt.bindString(12, MethodName);
        }
        stmt.bindLong(13, entity.getDays());
        stmt.bindLong(14, entity.getPeriod());
 
        String ProjectContentId = entity.getProjectContentId();
        if (ProjectContentId != null) {
            stmt.bindString(15, ProjectContentId);
        }
 
        String TagParentId = entity.getTagParentId();
        if (TagParentId != null) {
            stmt.bindString(16, TagParentId);
        }
 
        String TagParentName = entity.getTagParentName();
        if (TagParentName != null) {
            stmt.bindString(17, TagParentName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectDetial entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String ProjectId = entity.getProjectId();
        if (ProjectId != null) {
            stmt.bindString(2, ProjectId);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(3, UpdateTime);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(4, TagId);
        }
 
        String TagName = entity.getTagName();
        if (TagName != null) {
            stmt.bindString(5, TagName);
        }
 
        String MonItemId = entity.getMonItemId();
        if (MonItemId != null) {
            stmt.bindString(6, MonItemId);
        }
 
        String MethodId = entity.getMethodId();
        if (MethodId != null) {
            stmt.bindString(7, MethodId);
        }
 
        String AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindString(8, AddressId);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(9, Address);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(10, Comment);
        }
 
        String MonItemName = entity.getMonItemName();
        if (MonItemName != null) {
            stmt.bindString(11, MonItemName);
        }
 
        String MethodName = entity.getMethodName();
        if (MethodName != null) {
            stmt.bindString(12, MethodName);
        }
        stmt.bindLong(13, entity.getDays());
        stmt.bindLong(14, entity.getPeriod());
 
        String ProjectContentId = entity.getProjectContentId();
        if (ProjectContentId != null) {
            stmt.bindString(15, ProjectContentId);
        }
 
        String TagParentId = entity.getTagParentId();
        if (TagParentId != null) {
            stmt.bindString(16, TagParentId);
        }
 
        String TagParentName = entity.getTagParentName();
        if (TagParentName != null) {
            stmt.bindString(17, TagParentName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ProjectDetial readEntity(Cursor cursor, int offset) {
        ProjectDetial entity = new ProjectDetial( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ProjectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UpdateTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TagId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TagName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // MonItemId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // MethodId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // AddressId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Address
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Comment
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // MonItemName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // MethodName
            cursor.getInt(offset + 12), // Days
            cursor.getInt(offset + 13), // Period
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ProjectContentId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // TagParentId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // TagParentName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectDetial entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTagId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTagName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMonItemId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMethodId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddressId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComment(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMonItemName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMethodName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDays(cursor.getInt(offset + 12));
        entity.setPeriod(cursor.getInt(offset + 13));
        entity.setProjectContentId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTagParentId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTagParentName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ProjectDetial entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ProjectDetial entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectDetial entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
