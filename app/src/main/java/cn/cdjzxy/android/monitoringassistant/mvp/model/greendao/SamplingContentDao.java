package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.sampling.SamplingContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAMPLING_CONTENT".
*/
public class SamplingContentDao extends AbstractDao<SamplingContent, String> {

    public static final String TABLENAME = "SAMPLING_CONTENT";

    /**
     * Properties of entity SamplingContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property SamplingId = new Property(1, String.class, "SamplingId", false, "SAMPLING_ID");
        public final static Property ProjectId = new Property(2, String.class, "ProjectId", false, "PROJECT_ID");
        public final static Property OrderIndex = new Property(3, int.class, "OrderIndex", false, "ORDER_INDEX");
        public final static Property SampingCode = new Property(4, String.class, "SampingCode", false, "SAMPING_CODE");
        public final static Property FrequecyNo = new Property(5, int.class, "FrequecyNo", false, "FREQUECY_NO");
        public final static Property SamplingTime = new Property(6, String.class, "SamplingTime", false, "SAMPLING_TIME");
        public final static Property SamplingType = new Property(7, int.class, "SamplingType", false, "SAMPLING_TYPE");
        public final static Property SampStandId = new Property(8, String.class, "SampStandId", false, "SAMP_STAND_ID");
        public final static Property MonitemId = new Property(9, String.class, "MonitemId", false, "MONITEM_ID");
        public final static Property MonitemName = new Property(10, String.class, "MonitemName", false, "MONITEM_NAME");
        public final static Property AddresssId = new Property(11, String.class, "AddresssId", false, "ADDRESSS_ID");
        public final static Property AddressName = new Property(12, String.class, "AddressName", false, "ADDRESS_NAME");
        public final static Property SamplingCount = new Property(13, int.class, "SamplingCount", false, "SAMPLING_COUNT");
        public final static Property Preservative = new Property(14, String.class, "Preservative", false, "PRESERVATIVE");
        public final static Property SampleCollection = new Property(15, String.class, "SampleCollection", false, "SAMPLE_COLLECTION");
        public final static Property SampleAcceptance = new Property(16, String.class, "SampleAcceptance", false, "SAMPLE_ACCEPTANCE");
        public final static Property IsSenceAnalysis = new Property(17, boolean.class, "IsSenceAnalysis", false, "IS_SENCE_ANALYSIS");
        public final static Property IsCompare = new Property(18, boolean.class, "IsCompare", false, "IS_COMPARE");
        public final static Property AnasysTime = new Property(19, String.class, "AnasysTime", false, "ANASYS_TIME");
        public final static Property Value1 = new Property(20, String.class, "Value1", false, "VALUE1");
        public final static Property ValueUnit1 = new Property(21, String.class, "ValueUnit1", false, "VALUE_UNIT1");
        public final static Property ValueUnit1Name = new Property(22, String.class, "valueUnit1Name", false, "VALUE_UNIT1_NAME");
        public final static Property Value2 = new Property(23, String.class, "Value2", false, "VALUE2");
        public final static Property ValueUnit2 = new Property(24, String.class, "valueUnit2", false, "VALUE_UNIT2");
        public final static Property ValueUnit2Name = new Property(25, String.class, "valueUnit2Name", false, "VALUE_UNIT2_NAME");
        public final static Property Value3 = new Property(26, String.class, "Value3", false, "VALUE3");
        public final static Property ValueUnit3 = new Property(27, String.class, "ValueUnit3", false, "VALUE_UNIT3");
        public final static Property ValueUnit3Name = new Property(28, String.class, "valueUnit3Name", false, "VALUE_UNIT3_NAME");
        public final static Property Value = new Property(29, String.class, "Value", false, "VALUE");
        public final static Property ValueUnit = new Property(30, String.class, "ValueUnit", false, "VALUE_UNIT");
        public final static Property ValueUnitNname = new Property(31, String.class, "ValueUnitNname", false, "VALUE_UNIT_NNAME");
        public final static Property Value4 = new Property(32, String.class, "Value4", false, "VALUE4");
        public final static Property Value5 = new Property(33, String.class, "Value5", false, "VALUE5");
        public final static Property MethodName = new Property(34, String.class, "MethodName", false, "METHOD_NAME");
        public final static Property MethodId = new Property(35, String.class, "MethodId", false, "METHOD_ID");
        public final static Property DeviceIdName = new Property(36, String.class, "DeviceIdName", false, "DEVICE_ID_NAME");
        public final static Property DeviceId = new Property(37, String.class, "DeviceId", false, "DEVICE_ID");
        public final static Property Description = new Property(38, String.class, "Description", false, "DESCRIPTION");
        public final static Property PrivateData = new Property(39, String.class, "PrivateData", false, "PRIVATE_DATA");
        public final static Property IsAddPreserve = new Property(40, boolean.class, "isAddPreserve", false, "IS_ADD_PRESERVE");
        public final static Property SamplingOnTime = new Property(41, String.class, "SamplingOnTime", false, "SAMPLING_ON_TIME");
        public final static Property SenceMonitemId = new Property(42, String.class, "SenceMonitemId", false, "SENCE_MONITEM_ID");
        public final static Property SenceMonitemName = new Property(43, String.class, "SenceMonitemName", false, "SENCE_MONITEM_NAME");
    }


    public SamplingContentDao(DaoConfig config) {
        super(config);
    }
    
    public SamplingContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAMPLING_CONTENT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"SAMPLING_ID\" TEXT," + // 1: SamplingId
                "\"PROJECT_ID\" TEXT," + // 2: ProjectId
                "\"ORDER_INDEX\" INTEGER NOT NULL ," + // 3: OrderIndex
                "\"SAMPING_CODE\" TEXT," + // 4: SampingCode
                "\"FREQUECY_NO\" INTEGER NOT NULL ," + // 5: FrequecyNo
                "\"SAMPLING_TIME\" TEXT," + // 6: SamplingTime
                "\"SAMPLING_TYPE\" INTEGER NOT NULL ," + // 7: SamplingType
                "\"SAMP_STAND_ID\" TEXT," + // 8: SampStandId
                "\"MONITEM_ID\" TEXT," + // 9: MonitemId
                "\"MONITEM_NAME\" TEXT," + // 10: MonitemName
                "\"ADDRESSS_ID\" TEXT," + // 11: AddresssId
                "\"ADDRESS_NAME\" TEXT," + // 12: AddressName
                "\"SAMPLING_COUNT\" INTEGER NOT NULL ," + // 13: SamplingCount
                "\"PRESERVATIVE\" TEXT," + // 14: Preservative
                "\"SAMPLE_COLLECTION\" TEXT," + // 15: SampleCollection
                "\"SAMPLE_ACCEPTANCE\" TEXT," + // 16: SampleAcceptance
                "\"IS_SENCE_ANALYSIS\" INTEGER NOT NULL ," + // 17: IsSenceAnalysis
                "\"IS_COMPARE\" INTEGER NOT NULL ," + // 18: IsCompare
                "\"ANASYS_TIME\" TEXT," + // 19: AnasysTime
                "\"VALUE1\" TEXT," + // 20: Value1
                "\"VALUE_UNIT1\" TEXT," + // 21: ValueUnit1
                "\"VALUE_UNIT1_NAME\" TEXT," + // 22: valueUnit1Name
                "\"VALUE2\" TEXT," + // 23: Value2
                "\"VALUE_UNIT2\" TEXT," + // 24: valueUnit2
                "\"VALUE_UNIT2_NAME\" TEXT," + // 25: valueUnit2Name
                "\"VALUE3\" TEXT," + // 26: Value3
                "\"VALUE_UNIT3\" TEXT," + // 27: ValueUnit3
                "\"VALUE_UNIT3_NAME\" TEXT," + // 28: valueUnit3Name
                "\"VALUE\" TEXT," + // 29: Value
                "\"VALUE_UNIT\" TEXT," + // 30: ValueUnit
                "\"VALUE_UNIT_NNAME\" TEXT," + // 31: ValueUnitNname
                "\"VALUE4\" TEXT," + // 32: Value4
                "\"VALUE5\" TEXT," + // 33: Value5
                "\"METHOD_NAME\" TEXT," + // 34: MethodName
                "\"METHOD_ID\" TEXT," + // 35: MethodId
                "\"DEVICE_ID_NAME\" TEXT," + // 36: DeviceIdName
                "\"DEVICE_ID\" TEXT," + // 37: DeviceId
                "\"DESCRIPTION\" TEXT," + // 38: Description
                "\"PRIVATE_DATA\" TEXT," + // 39: PrivateData
                "\"IS_ADD_PRESERVE\" INTEGER NOT NULL ," + // 40: isAddPreserve
                "\"SAMPLING_ON_TIME\" TEXT," + // 41: SamplingOnTime
                "\"SENCE_MONITEM_ID\" TEXT," + // 42: SenceMonitemId
                "\"SENCE_MONITEM_NAME\" TEXT);"); // 43: SenceMonitemName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAMPLING_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SamplingContent entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String SamplingId = entity.getSamplingId();
        if (SamplingId != null) {
            stmt.bindString(2, SamplingId);
        }
 
        String ProjectId = entity.getProjectId();
        if (ProjectId != null) {
            stmt.bindString(3, ProjectId);
        }
        stmt.bindLong(4, entity.getOrderIndex());
 
        String SampingCode = entity.getSampingCode();
        if (SampingCode != null) {
            stmt.bindString(5, SampingCode);
        }
        stmt.bindLong(6, entity.getFrequecyNo());
 
        String SamplingTime = entity.getSamplingTime();
        if (SamplingTime != null) {
            stmt.bindString(7, SamplingTime);
        }
        stmt.bindLong(8, entity.getSamplingType());
 
        String SampStandId = entity.getSampStandId();
        if (SampStandId != null) {
            stmt.bindString(9, SampStandId);
        }
 
        String MonitemId = entity.getMonitemId();
        if (MonitemId != null) {
            stmt.bindString(10, MonitemId);
        }
 
        String MonitemName = entity.getMonitemName();
        if (MonitemName != null) {
            stmt.bindString(11, MonitemName);
        }
 
        String AddresssId = entity.getAddresssId();
        if (AddresssId != null) {
            stmt.bindString(12, AddresssId);
        }
 
        String AddressName = entity.getAddressName();
        if (AddressName != null) {
            stmt.bindString(13, AddressName);
        }
        stmt.bindLong(14, entity.getSamplingCount());
 
        String Preservative = entity.getPreservative();
        if (Preservative != null) {
            stmt.bindString(15, Preservative);
        }
 
        String SampleCollection = entity.getSampleCollection();
        if (SampleCollection != null) {
            stmt.bindString(16, SampleCollection);
        }
 
        String SampleAcceptance = entity.getSampleAcceptance();
        if (SampleAcceptance != null) {
            stmt.bindString(17, SampleAcceptance);
        }
        stmt.bindLong(18, entity.getIsSenceAnalysis() ? 1L: 0L);
        stmt.bindLong(19, entity.getIsCompare() ? 1L: 0L);
 
        String AnasysTime = entity.getAnasysTime();
        if (AnasysTime != null) {
            stmt.bindString(20, AnasysTime);
        }
 
        String Value1 = entity.getValue1();
        if (Value1 != null) {
            stmt.bindString(21, Value1);
        }
 
        String ValueUnit1 = entity.getValueUnit1();
        if (ValueUnit1 != null) {
            stmt.bindString(22, ValueUnit1);
        }
 
        String valueUnit1Name = entity.getValueUnit1Name();
        if (valueUnit1Name != null) {
            stmt.bindString(23, valueUnit1Name);
        }
 
        String Value2 = entity.getValue2();
        if (Value2 != null) {
            stmt.bindString(24, Value2);
        }
 
        String valueUnit2 = entity.getValueUnit2();
        if (valueUnit2 != null) {
            stmt.bindString(25, valueUnit2);
        }
 
        String valueUnit2Name = entity.getValueUnit2Name();
        if (valueUnit2Name != null) {
            stmt.bindString(26, valueUnit2Name);
        }
 
        String Value3 = entity.getValue3();
        if (Value3 != null) {
            stmt.bindString(27, Value3);
        }
 
        String ValueUnit3 = entity.getValueUnit3();
        if (ValueUnit3 != null) {
            stmt.bindString(28, ValueUnit3);
        }
 
        String valueUnit3Name = entity.getValueUnit3Name();
        if (valueUnit3Name != null) {
            stmt.bindString(29, valueUnit3Name);
        }
 
        String Value = entity.getValue();
        if (Value != null) {
            stmt.bindString(30, Value);
        }
 
        String ValueUnit = entity.getValueUnit();
        if (ValueUnit != null) {
            stmt.bindString(31, ValueUnit);
        }
 
        String ValueUnitNname = entity.getValueUnitNname();
        if (ValueUnitNname != null) {
            stmt.bindString(32, ValueUnitNname);
        }
 
        String Value4 = entity.getValue4();
        if (Value4 != null) {
            stmt.bindString(33, Value4);
        }
 
        String Value5 = entity.getValue5();
        if (Value5 != null) {
            stmt.bindString(34, Value5);
        }
 
        String MethodName = entity.getMethodName();
        if (MethodName != null) {
            stmt.bindString(35, MethodName);
        }
 
        String MethodId = entity.getMethodId();
        if (MethodId != null) {
            stmt.bindString(36, MethodId);
        }
 
        String DeviceIdName = entity.getDeviceIdName();
        if (DeviceIdName != null) {
            stmt.bindString(37, DeviceIdName);
        }
 
        String DeviceId = entity.getDeviceId();
        if (DeviceId != null) {
            stmt.bindString(38, DeviceId);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(39, Description);
        }
 
        String PrivateData = entity.getPrivateData();
        if (PrivateData != null) {
            stmt.bindString(40, PrivateData);
        }
        stmt.bindLong(41, entity.getIsAddPreserve() ? 1L: 0L);
 
        String SamplingOnTime = entity.getSamplingOnTime();
        if (SamplingOnTime != null) {
            stmt.bindString(42, SamplingOnTime);
        }
 
        String SenceMonitemId = entity.getSenceMonitemId();
        if (SenceMonitemId != null) {
            stmt.bindString(43, SenceMonitemId);
        }
 
        String SenceMonitemName = entity.getSenceMonitemName();
        if (SenceMonitemName != null) {
            stmt.bindString(44, SenceMonitemName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SamplingContent entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String SamplingId = entity.getSamplingId();
        if (SamplingId != null) {
            stmt.bindString(2, SamplingId);
        }
 
        String ProjectId = entity.getProjectId();
        if (ProjectId != null) {
            stmt.bindString(3, ProjectId);
        }
        stmt.bindLong(4, entity.getOrderIndex());
 
        String SampingCode = entity.getSampingCode();
        if (SampingCode != null) {
            stmt.bindString(5, SampingCode);
        }
        stmt.bindLong(6, entity.getFrequecyNo());
 
        String SamplingTime = entity.getSamplingTime();
        if (SamplingTime != null) {
            stmt.bindString(7, SamplingTime);
        }
        stmt.bindLong(8, entity.getSamplingType());
 
        String SampStandId = entity.getSampStandId();
        if (SampStandId != null) {
            stmt.bindString(9, SampStandId);
        }
 
        String MonitemId = entity.getMonitemId();
        if (MonitemId != null) {
            stmt.bindString(10, MonitemId);
        }
 
        String MonitemName = entity.getMonitemName();
        if (MonitemName != null) {
            stmt.bindString(11, MonitemName);
        }
 
        String AddresssId = entity.getAddresssId();
        if (AddresssId != null) {
            stmt.bindString(12, AddresssId);
        }
 
        String AddressName = entity.getAddressName();
        if (AddressName != null) {
            stmt.bindString(13, AddressName);
        }
        stmt.bindLong(14, entity.getSamplingCount());
 
        String Preservative = entity.getPreservative();
        if (Preservative != null) {
            stmt.bindString(15, Preservative);
        }
 
        String SampleCollection = entity.getSampleCollection();
        if (SampleCollection != null) {
            stmt.bindString(16, SampleCollection);
        }
 
        String SampleAcceptance = entity.getSampleAcceptance();
        if (SampleAcceptance != null) {
            stmt.bindString(17, SampleAcceptance);
        }
        stmt.bindLong(18, entity.getIsSenceAnalysis() ? 1L: 0L);
        stmt.bindLong(19, entity.getIsCompare() ? 1L: 0L);
 
        String AnasysTime = entity.getAnasysTime();
        if (AnasysTime != null) {
            stmt.bindString(20, AnasysTime);
        }
 
        String Value1 = entity.getValue1();
        if (Value1 != null) {
            stmt.bindString(21, Value1);
        }
 
        String ValueUnit1 = entity.getValueUnit1();
        if (ValueUnit1 != null) {
            stmt.bindString(22, ValueUnit1);
        }
 
        String valueUnit1Name = entity.getValueUnit1Name();
        if (valueUnit1Name != null) {
            stmt.bindString(23, valueUnit1Name);
        }
 
        String Value2 = entity.getValue2();
        if (Value2 != null) {
            stmt.bindString(24, Value2);
        }
 
        String valueUnit2 = entity.getValueUnit2();
        if (valueUnit2 != null) {
            stmt.bindString(25, valueUnit2);
        }
 
        String valueUnit2Name = entity.getValueUnit2Name();
        if (valueUnit2Name != null) {
            stmt.bindString(26, valueUnit2Name);
        }
 
        String Value3 = entity.getValue3();
        if (Value3 != null) {
            stmt.bindString(27, Value3);
        }
 
        String ValueUnit3 = entity.getValueUnit3();
        if (ValueUnit3 != null) {
            stmt.bindString(28, ValueUnit3);
        }
 
        String valueUnit3Name = entity.getValueUnit3Name();
        if (valueUnit3Name != null) {
            stmt.bindString(29, valueUnit3Name);
        }
 
        String Value = entity.getValue();
        if (Value != null) {
            stmt.bindString(30, Value);
        }
 
        String ValueUnit = entity.getValueUnit();
        if (ValueUnit != null) {
            stmt.bindString(31, ValueUnit);
        }
 
        String ValueUnitNname = entity.getValueUnitNname();
        if (ValueUnitNname != null) {
            stmt.bindString(32, ValueUnitNname);
        }
 
        String Value4 = entity.getValue4();
        if (Value4 != null) {
            stmt.bindString(33, Value4);
        }
 
        String Value5 = entity.getValue5();
        if (Value5 != null) {
            stmt.bindString(34, Value5);
        }
 
        String MethodName = entity.getMethodName();
        if (MethodName != null) {
            stmt.bindString(35, MethodName);
        }
 
        String MethodId = entity.getMethodId();
        if (MethodId != null) {
            stmt.bindString(36, MethodId);
        }
 
        String DeviceIdName = entity.getDeviceIdName();
        if (DeviceIdName != null) {
            stmt.bindString(37, DeviceIdName);
        }
 
        String DeviceId = entity.getDeviceId();
        if (DeviceId != null) {
            stmt.bindString(38, DeviceId);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(39, Description);
        }
 
        String PrivateData = entity.getPrivateData();
        if (PrivateData != null) {
            stmt.bindString(40, PrivateData);
        }
        stmt.bindLong(41, entity.getIsAddPreserve() ? 1L: 0L);
 
        String SamplingOnTime = entity.getSamplingOnTime();
        if (SamplingOnTime != null) {
            stmt.bindString(42, SamplingOnTime);
        }
 
        String SenceMonitemId = entity.getSenceMonitemId();
        if (SenceMonitemId != null) {
            stmt.bindString(43, SenceMonitemId);
        }
 
        String SenceMonitemName = entity.getSenceMonitemName();
        if (SenceMonitemName != null) {
            stmt.bindString(44, SenceMonitemName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SamplingContent readEntity(Cursor cursor, int offset) {
        SamplingContent entity = new SamplingContent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SamplingId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ProjectId
            cursor.getInt(offset + 3), // OrderIndex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SampingCode
            cursor.getInt(offset + 5), // FrequecyNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // SamplingTime
            cursor.getInt(offset + 7), // SamplingType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SampStandId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // MonitemId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // MonitemName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // AddresssId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // AddressName
            cursor.getInt(offset + 13), // SamplingCount
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Preservative
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // SampleCollection
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // SampleAcceptance
            cursor.getShort(offset + 17) != 0, // IsSenceAnalysis
            cursor.getShort(offset + 18) != 0, // IsCompare
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // AnasysTime
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // Value1
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // ValueUnit1
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // valueUnit1Name
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // Value2
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // valueUnit2
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // valueUnit2Name
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // Value3
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // ValueUnit3
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // valueUnit3Name
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // Value
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // ValueUnit
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // ValueUnitNname
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // Value4
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // Value5
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // MethodName
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // MethodId
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // DeviceIdName
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // DeviceId
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // Description
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // PrivateData
            cursor.getShort(offset + 40) != 0, // isAddPreserve
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // SamplingOnTime
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // SenceMonitemId
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43) // SenceMonitemName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SamplingContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSamplingId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProjectId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderIndex(cursor.getInt(offset + 3));
        entity.setSampingCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFrequecyNo(cursor.getInt(offset + 5));
        entity.setSamplingTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSamplingType(cursor.getInt(offset + 7));
        entity.setSampStandId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMonitemId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMonitemName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddresssId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddressName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSamplingCount(cursor.getInt(offset + 13));
        entity.setPreservative(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSampleCollection(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSampleAcceptance(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsSenceAnalysis(cursor.getShort(offset + 17) != 0);
        entity.setIsCompare(cursor.getShort(offset + 18) != 0);
        entity.setAnasysTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setValue1(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setValueUnit1(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setValueUnit1Name(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setValue2(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setValueUnit2(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setValueUnit2Name(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setValue3(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setValueUnit3(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setValueUnit3Name(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setValue(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setValueUnit(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setValueUnitNname(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setValue4(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setValue5(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setMethodName(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setMethodId(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setDeviceIdName(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setDeviceId(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setDescription(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setPrivateData(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setIsAddPreserve(cursor.getShort(offset + 40) != 0);
        entity.setSamplingOnTime(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setSenceMonitemId(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setSenceMonitemName(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SamplingContent entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SamplingContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SamplingContent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
