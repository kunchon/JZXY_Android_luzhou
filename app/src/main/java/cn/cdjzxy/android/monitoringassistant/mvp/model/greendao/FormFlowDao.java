package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.sampling.FormFlow;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORM_FLOW".
*/
public class FormFlowDao extends AbstractDao<FormFlow, Void> {

    public static final String TABLENAME = "FORM_FLOW";

    /**
     * Properties of entity FormFlow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FlowId = new Property(0, String.class, "FlowId", false, "FLOW_ID");
        public final static Property FlowName = new Property(1, String.class, "FlowName", false, "FLOW_NAME");
        public final static Property NodeNumber = new Property(2, int.class, "NodeNumber", false, "NODE_NUMBER");
        public final static Property CurrentStatus = new Property(3, int.class, "CurrentStatus", false, "CURRENT_STATUS");
        public final static Property IsJoinFlow = new Property(4, boolean.class, "IsJoinFlow", false, "IS_JOIN_FLOW");
        public final static Property NodeHandleCode = new Property(5, String.class, "NodeHandleCode", false, "NODE_HANDLE_CODE");
        public final static Property AllFlowUsers = new Property(6, String.class, "AllFlowUsers", false, "ALL_FLOW_USERS");
        public final static Property FlowUserIds = new Property(7, String.class, "FlowUserIds", false, "FLOW_USER_IDS");
        public final static Property FlowUserNames = new Property(8, String.class, "FlowUserNames", false, "FLOW_USER_NAMES");
    }


    public FormFlowDao(DaoConfig config) {
        super(config);
    }
    
    public FormFlowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORM_FLOW\" (" + //
                "\"FLOW_ID\" TEXT," + // 0: FlowId
                "\"FLOW_NAME\" TEXT," + // 1: FlowName
                "\"NODE_NUMBER\" INTEGER NOT NULL ," + // 2: NodeNumber
                "\"CURRENT_STATUS\" INTEGER NOT NULL ," + // 3: CurrentStatus
                "\"IS_JOIN_FLOW\" INTEGER NOT NULL ," + // 4: IsJoinFlow
                "\"NODE_HANDLE_CODE\" TEXT," + // 5: NodeHandleCode
                "\"ALL_FLOW_USERS\" TEXT," + // 6: AllFlowUsers
                "\"FLOW_USER_IDS\" TEXT," + // 7: FlowUserIds
                "\"FLOW_USER_NAMES\" TEXT);"); // 8: FlowUserNames
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORM_FLOW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FormFlow entity) {
        stmt.clearBindings();
 
        String FlowId = entity.getFlowId();
        if (FlowId != null) {
            stmt.bindString(1, FlowId);
        }
 
        String FlowName = entity.getFlowName();
        if (FlowName != null) {
            stmt.bindString(2, FlowName);
        }
        stmt.bindLong(3, entity.getNodeNumber());
        stmt.bindLong(4, entity.getCurrentStatus());
        stmt.bindLong(5, entity.getIsJoinFlow() ? 1L: 0L);
 
        String NodeHandleCode = entity.getNodeHandleCode();
        if (NodeHandleCode != null) {
            stmt.bindString(6, NodeHandleCode);
        }
 
        String AllFlowUsers = entity.getAllFlowUsers();
        if (AllFlowUsers != null) {
            stmt.bindString(7, AllFlowUsers);
        }
 
        String FlowUserIds = entity.getFlowUserIds();
        if (FlowUserIds != null) {
            stmt.bindString(8, FlowUserIds);
        }
 
        String FlowUserNames = entity.getFlowUserNames();
        if (FlowUserNames != null) {
            stmt.bindString(9, FlowUserNames);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FormFlow entity) {
        stmt.clearBindings();
 
        String FlowId = entity.getFlowId();
        if (FlowId != null) {
            stmt.bindString(1, FlowId);
        }
 
        String FlowName = entity.getFlowName();
        if (FlowName != null) {
            stmt.bindString(2, FlowName);
        }
        stmt.bindLong(3, entity.getNodeNumber());
        stmt.bindLong(4, entity.getCurrentStatus());
        stmt.bindLong(5, entity.getIsJoinFlow() ? 1L: 0L);
 
        String NodeHandleCode = entity.getNodeHandleCode();
        if (NodeHandleCode != null) {
            stmt.bindString(6, NodeHandleCode);
        }
 
        String AllFlowUsers = entity.getAllFlowUsers();
        if (AllFlowUsers != null) {
            stmt.bindString(7, AllFlowUsers);
        }
 
        String FlowUserIds = entity.getFlowUserIds();
        if (FlowUserIds != null) {
            stmt.bindString(8, FlowUserIds);
        }
 
        String FlowUserNames = entity.getFlowUserNames();
        if (FlowUserNames != null) {
            stmt.bindString(9, FlowUserNames);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FormFlow readEntity(Cursor cursor, int offset) {
        FormFlow entity = new FormFlow( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FlowId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FlowName
            cursor.getInt(offset + 2), // NodeNumber
            cursor.getInt(offset + 3), // CurrentStatus
            cursor.getShort(offset + 4) != 0, // IsJoinFlow
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // NodeHandleCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // AllFlowUsers
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FlowUserIds
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // FlowUserNames
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FormFlow entity, int offset) {
        entity.setFlowId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFlowName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNodeNumber(cursor.getInt(offset + 2));
        entity.setCurrentStatus(cursor.getInt(offset + 3));
        entity.setIsJoinFlow(cursor.getShort(offset + 4) != 0);
        entity.setNodeHandleCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAllFlowUsers(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFlowUserIds(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFlowUserNames(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FormFlow entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FormFlow entity) {
        return null;
    }

    @Override
    public boolean hasKey(FormFlow entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
