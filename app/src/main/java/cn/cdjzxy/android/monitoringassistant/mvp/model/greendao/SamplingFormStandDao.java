package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.utils.converter.StringConverter;
import java.util.List;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.sampling.SamplingFormStand;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAMPLING_FORM_STAND".
*/
public class SamplingFormStandDao extends AbstractDao<SamplingFormStand, String> {

    public static final String TABLENAME = "SAMPLING_FORM_STAND";

    /**
     * Properties of entity SamplingFormStand.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property SamplingId = new Property(1, String.class, "SamplingId", false, "SAMPLING_ID");
        public final static Property StandNo = new Property(2, int.class, "StandNo", false, "STAND_NO");
        public final static Property MonitemIds = new Property(3, String.class, "MonitemIds", false, "MONITEM_IDS");
        public final static Property MonitemName = new Property(4, String.class, "MonitemName", false, "MONITEM_NAME");
        public final static Property SamplingAmount = new Property(5, String.class, "SamplingAmount", false, "SAMPLING_AMOUNT");
        public final static Property AnalysisSite = new Property(6, String.class, "AnalysisSite", false, "ANALYSIS_SITE");
        public final static Property SaveMehtod = new Property(7, String.class, "SaveMehtod", false, "SAVE_MEHTOD");
        public final static Property Preservative = new Property(8, String.class, "Preservative", false, "PRESERVATIVE");
        public final static Property Count = new Property(9, int.class, "Count", false, "COUNT");
        public final static Property Container = new Property(10, String.class, "Container", false, "CONTAINER");
        public final static Property SaveTimes = new Property(11, String.class, "SaveTimes", false, "SAVE_TIMES");
        public final static Property Index = new Property(12, int.class, "Index", false, "INDEX");
        public final static Property UpdateTime = new Property(13, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property SampingCode = new Property(14, String.class, "SampingCode", false, "SAMPING_CODE");
        public final static Property MonItems = new Property(15, String.class, "MonItems", false, "MON_ITEMS");
    }

    private final StringConverter MonItemsConverter = new StringConverter();

    public SamplingFormStandDao(DaoConfig config) {
        super(config);
    }
    
    public SamplingFormStandDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAMPLING_FORM_STAND\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"SAMPLING_ID\" TEXT," + // 1: SamplingId
                "\"STAND_NO\" INTEGER NOT NULL ," + // 2: StandNo
                "\"MONITEM_IDS\" TEXT," + // 3: MonitemIds
                "\"MONITEM_NAME\" TEXT," + // 4: MonitemName
                "\"SAMPLING_AMOUNT\" TEXT," + // 5: SamplingAmount
                "\"ANALYSIS_SITE\" TEXT," + // 6: AnalysisSite
                "\"SAVE_MEHTOD\" TEXT," + // 7: SaveMehtod
                "\"PRESERVATIVE\" TEXT," + // 8: Preservative
                "\"COUNT\" INTEGER NOT NULL ," + // 9: Count
                "\"CONTAINER\" TEXT," + // 10: Container
                "\"SAVE_TIMES\" TEXT," + // 11: SaveTimes
                "\"INDEX\" INTEGER NOT NULL ," + // 12: Index
                "\"UPDATE_TIME\" TEXT," + // 13: UpdateTime
                "\"SAMPING_CODE\" TEXT," + // 14: SampingCode
                "\"MON_ITEMS\" TEXT);"); // 15: MonItems
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAMPLING_FORM_STAND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SamplingFormStand entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String SamplingId = entity.getSamplingId();
        if (SamplingId != null) {
            stmt.bindString(2, SamplingId);
        }
        stmt.bindLong(3, entity.getStandNo());
 
        String MonitemIds = entity.getMonitemIds();
        if (MonitemIds != null) {
            stmt.bindString(4, MonitemIds);
        }
 
        String MonitemName = entity.getMonitemName();
        if (MonitemName != null) {
            stmt.bindString(5, MonitemName);
        }
 
        String SamplingAmount = entity.getSamplingAmount();
        if (SamplingAmount != null) {
            stmt.bindString(6, SamplingAmount);
        }
 
        String AnalysisSite = entity.getAnalysisSite();
        if (AnalysisSite != null) {
            stmt.bindString(7, AnalysisSite);
        }
 
        String SaveMehtod = entity.getSaveMehtod();
        if (SaveMehtod != null) {
            stmt.bindString(8, SaveMehtod);
        }
 
        String Preservative = entity.getPreservative();
        if (Preservative != null) {
            stmt.bindString(9, Preservative);
        }
        stmt.bindLong(10, entity.getCount());
 
        String Container = entity.getContainer();
        if (Container != null) {
            stmt.bindString(11, Container);
        }
 
        String SaveTimes = entity.getSaveTimes();
        if (SaveTimes != null) {
            stmt.bindString(12, SaveTimes);
        }
        stmt.bindLong(13, entity.getIndex());
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(14, UpdateTime);
        }
 
        String SampingCode = entity.getSampingCode();
        if (SampingCode != null) {
            stmt.bindString(15, SampingCode);
        }
 
        List MonItems = entity.getMonItems();
        if (MonItems != null) {
            stmt.bindString(16, MonItemsConverter.convertToDatabaseValue(MonItems));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SamplingFormStand entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String SamplingId = entity.getSamplingId();
        if (SamplingId != null) {
            stmt.bindString(2, SamplingId);
        }
        stmt.bindLong(3, entity.getStandNo());
 
        String MonitemIds = entity.getMonitemIds();
        if (MonitemIds != null) {
            stmt.bindString(4, MonitemIds);
        }
 
        String MonitemName = entity.getMonitemName();
        if (MonitemName != null) {
            stmt.bindString(5, MonitemName);
        }
 
        String SamplingAmount = entity.getSamplingAmount();
        if (SamplingAmount != null) {
            stmt.bindString(6, SamplingAmount);
        }
 
        String AnalysisSite = entity.getAnalysisSite();
        if (AnalysisSite != null) {
            stmt.bindString(7, AnalysisSite);
        }
 
        String SaveMehtod = entity.getSaveMehtod();
        if (SaveMehtod != null) {
            stmt.bindString(8, SaveMehtod);
        }
 
        String Preservative = entity.getPreservative();
        if (Preservative != null) {
            stmt.bindString(9, Preservative);
        }
        stmt.bindLong(10, entity.getCount());
 
        String Container = entity.getContainer();
        if (Container != null) {
            stmt.bindString(11, Container);
        }
 
        String SaveTimes = entity.getSaveTimes();
        if (SaveTimes != null) {
            stmt.bindString(12, SaveTimes);
        }
        stmt.bindLong(13, entity.getIndex());
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(14, UpdateTime);
        }
 
        String SampingCode = entity.getSampingCode();
        if (SampingCode != null) {
            stmt.bindString(15, SampingCode);
        }
 
        List MonItems = entity.getMonItems();
        if (MonItems != null) {
            stmt.bindString(16, MonItemsConverter.convertToDatabaseValue(MonItems));
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SamplingFormStand readEntity(Cursor cursor, int offset) {
        SamplingFormStand entity = new SamplingFormStand( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SamplingId
            cursor.getInt(offset + 2), // StandNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MonitemIds
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MonitemName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SamplingAmount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // AnalysisSite
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SaveMehtod
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Preservative
            cursor.getInt(offset + 9), // Count
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Container
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // SaveTimes
            cursor.getInt(offset + 12), // Index
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // UpdateTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // SampingCode
            cursor.isNull(offset + 15) ? null : MonItemsConverter.convertToEntityProperty(cursor.getString(offset + 15)) // MonItems
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SamplingFormStand entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSamplingId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStandNo(cursor.getInt(offset + 2));
        entity.setMonitemIds(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMonitemName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSamplingAmount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnalysisSite(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSaveMehtod(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPreservative(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCount(cursor.getInt(offset + 9));
        entity.setContainer(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSaveTimes(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIndex(cursor.getInt(offset + 12));
        entity.setUpdateTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSampingCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMonItems(cursor.isNull(offset + 15) ? null : MonItemsConverter.convertToEntityProperty(cursor.getString(offset + 15)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SamplingFormStand entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SamplingFormStand entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SamplingFormStand entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
