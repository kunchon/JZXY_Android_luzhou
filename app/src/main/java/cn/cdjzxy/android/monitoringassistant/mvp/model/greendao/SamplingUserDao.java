package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.sampling.SamplingUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAMPLING_USER".
*/
public class SamplingUserDao extends AbstractDao<SamplingUser, Void> {

    public static final String TABLENAME = "SAMPLING_USER";

    /**
     * Properties of entity SamplingUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "UserId", false, "USER_ID");
        public final static Property UserName = new Property(1, String.class, "UserName", false, "USER_NAME");
    }


    public SamplingUserDao(DaoConfig config) {
        super(config);
    }
    
    public SamplingUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAMPLING_USER\" (" + //
                "\"USER_ID\" TEXT," + // 0: UserId
                "\"USER_NAME\" TEXT);"); // 1: UserName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAMPLING_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SamplingUser entity) {
        stmt.clearBindings();
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(1, UserId);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(2, UserName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SamplingUser entity) {
        stmt.clearBindings();
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(1, UserId);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(2, UserName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SamplingUser readEntity(Cursor cursor, int offset) {
        SamplingUser entity = new SamplingUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // UserId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // UserName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SamplingUser entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SamplingUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SamplingUser entity) {
        return null;
    }

    @Override
    public boolean hasKey(SamplingUser entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
