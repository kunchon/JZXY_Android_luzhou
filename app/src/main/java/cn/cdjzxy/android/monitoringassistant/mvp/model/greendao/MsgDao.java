package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.msg.Msg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG".
*/
public class MsgDao extends AbstractDao<Msg, String> {

    public static final String TABLENAME = "MSG";

    /**
     * Properties of entity Msg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property MsgContent = new Property(1, String.class, "MsgContent", false, "MSG_CONTENT");
        public final static Property MsgTitle = new Property(2, String.class, "MsgTitle", false, "MSG_TITLE");
        public final static Property RecipientsId = new Property(3, String.class, "RecipientsId", false, "RECIPIENTS_ID");
        public final static Property Recipients = new Property(4, String.class, "Recipients", false, "RECIPIENTS");
        public final static Property SendTime = new Property(5, String.class, "SendTime", false, "SEND_TIME");
        public final static Property ReceiveTime = new Property(6, String.class, "ReceiveTime", false, "RECEIVE_TIME");
        public final static Property MsgStatus = new Property(7, int.class, "MsgStatus", false, "MSG_STATUS");
        public final static Property MsgStatusName = new Property(8, String.class, "MsgStatusName", false, "MSG_STATUS_NAME");
        public final static Property ReceiptType = new Property(9, String.class, "ReceiptType", false, "RECEIPT_TYPE");
        public final static Property ReceiptTypeName = new Property(10, String.class, "ReceiptTypeName", false, "RECEIPT_TYPE_NAME");
        public final static Property MessageOutType = new Property(11, int.class, "MessageOutType", false, "MESSAGE_OUT_TYPE");
        public final static Property MessageOutTypeName = new Property(12, String.class, "MessageOutTypeName", false, "MESSAGE_OUT_TYPE_NAME");
    }


    public MsgDao(DaoConfig config) {
        super(config);
    }
    
    public MsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"MSG_CONTENT\" TEXT," + // 1: MsgContent
                "\"MSG_TITLE\" TEXT," + // 2: MsgTitle
                "\"RECIPIENTS_ID\" TEXT," + // 3: RecipientsId
                "\"RECIPIENTS\" TEXT," + // 4: Recipients
                "\"SEND_TIME\" TEXT," + // 5: SendTime
                "\"RECEIVE_TIME\" TEXT," + // 6: ReceiveTime
                "\"MSG_STATUS\" INTEGER NOT NULL ," + // 7: MsgStatus
                "\"MSG_STATUS_NAME\" TEXT," + // 8: MsgStatusName
                "\"RECEIPT_TYPE\" TEXT," + // 9: ReceiptType
                "\"RECEIPT_TYPE_NAME\" TEXT," + // 10: ReceiptTypeName
                "\"MESSAGE_OUT_TYPE\" INTEGER NOT NULL ," + // 11: MessageOutType
                "\"MESSAGE_OUT_TYPE_NAME\" TEXT);"); // 12: MessageOutTypeName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String MsgContent = entity.getMsgContent();
        if (MsgContent != null) {
            stmt.bindString(2, MsgContent);
        }
 
        String MsgTitle = entity.getMsgTitle();
        if (MsgTitle != null) {
            stmt.bindString(3, MsgTitle);
        }
 
        String RecipientsId = entity.getRecipientsId();
        if (RecipientsId != null) {
            stmt.bindString(4, RecipientsId);
        }
 
        String Recipients = entity.getRecipients();
        if (Recipients != null) {
            stmt.bindString(5, Recipients);
        }
 
        String SendTime = entity.getSendTime();
        if (SendTime != null) {
            stmt.bindString(6, SendTime);
        }
 
        String ReceiveTime = entity.getReceiveTime();
        if (ReceiveTime != null) {
            stmt.bindString(7, ReceiveTime);
        }
        stmt.bindLong(8, entity.getMsgStatus());
 
        String MsgStatusName = entity.getMsgStatusName();
        if (MsgStatusName != null) {
            stmt.bindString(9, MsgStatusName);
        }
 
        String ReceiptType = entity.getReceiptType();
        if (ReceiptType != null) {
            stmt.bindString(10, ReceiptType);
        }
 
        String ReceiptTypeName = entity.getReceiptTypeName();
        if (ReceiptTypeName != null) {
            stmt.bindString(11, ReceiptTypeName);
        }
        stmt.bindLong(12, entity.getMessageOutType());
 
        String MessageOutTypeName = entity.getMessageOutTypeName();
        if (MessageOutTypeName != null) {
            stmt.bindString(13, MessageOutTypeName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String MsgContent = entity.getMsgContent();
        if (MsgContent != null) {
            stmt.bindString(2, MsgContent);
        }
 
        String MsgTitle = entity.getMsgTitle();
        if (MsgTitle != null) {
            stmt.bindString(3, MsgTitle);
        }
 
        String RecipientsId = entity.getRecipientsId();
        if (RecipientsId != null) {
            stmt.bindString(4, RecipientsId);
        }
 
        String Recipients = entity.getRecipients();
        if (Recipients != null) {
            stmt.bindString(5, Recipients);
        }
 
        String SendTime = entity.getSendTime();
        if (SendTime != null) {
            stmt.bindString(6, SendTime);
        }
 
        String ReceiveTime = entity.getReceiveTime();
        if (ReceiveTime != null) {
            stmt.bindString(7, ReceiveTime);
        }
        stmt.bindLong(8, entity.getMsgStatus());
 
        String MsgStatusName = entity.getMsgStatusName();
        if (MsgStatusName != null) {
            stmt.bindString(9, MsgStatusName);
        }
 
        String ReceiptType = entity.getReceiptType();
        if (ReceiptType != null) {
            stmt.bindString(10, ReceiptType);
        }
 
        String ReceiptTypeName = entity.getReceiptTypeName();
        if (ReceiptTypeName != null) {
            stmt.bindString(11, ReceiptTypeName);
        }
        stmt.bindLong(12, entity.getMessageOutType());
 
        String MessageOutTypeName = entity.getMessageOutTypeName();
        if (MessageOutTypeName != null) {
            stmt.bindString(13, MessageOutTypeName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Msg readEntity(Cursor cursor, int offset) {
        Msg entity = new Msg( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MsgContent
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MsgTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // RecipientsId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Recipients
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SendTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ReceiveTime
            cursor.getInt(offset + 7), // MsgStatus
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // MsgStatusName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ReceiptType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ReceiptTypeName
            cursor.getInt(offset + 11), // MessageOutType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // MessageOutTypeName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Msg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMsgContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsgTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecipientsId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecipients(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSendTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReceiveTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMsgStatus(cursor.getInt(offset + 7));
        entity.setMsgStatusName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReceiptType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReceiptTypeName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMessageOutType(cursor.getInt(offset + 11));
        entity.setMessageOutTypeName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Msg entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Msg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Msg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
