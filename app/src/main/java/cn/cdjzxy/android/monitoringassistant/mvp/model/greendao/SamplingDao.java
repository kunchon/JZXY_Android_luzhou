package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.greendao.converter.StringConverter;
import java.util.List;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.sampling.Sampling;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAMPLING".
*/
public class SamplingDao extends AbstractDao<Sampling, String> {

    public static final String TABLENAME = "SAMPLING";

    /**
     * Properties of entity Sampling.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property ProjectId = new Property(1, String.class, "ProjectId", false, "PROJECT_ID");
        public final static Property SamplingNo = new Property(2, String.class, "SamplingNo", false, "SAMPLING_NO");
        public final static Property FormPath = new Property(3, String.class, "FormPath", false, "FORM_PATH");
        public final static Property FormName = new Property(4, String.class, "FormName", false, "FORM_NAME");
        public final static Property ProjectName = new Property(5, String.class, "ProjectName", false, "PROJECT_NAME");
        public final static Property Montype = new Property(6, int.class, "Montype", false, "MONTYPE");
        public final static Property SamplingTimeBegin = new Property(7, String.class, "SamplingTimeBegin", false, "SAMPLING_TIME_BEGIN");
        public final static Property SamplingTimeEnd = new Property(8, String.class, "SamplingTimeEnd", false, "SAMPLING_TIME_END");
        public final static Property ParentTagId = new Property(9, String.class, "ParentTagId", false, "PARENT_TAG_ID");
        public final static Property TagId = new Property(10, String.class, "TagId", false, "TAG_ID");
        public final static Property TagName = new Property(11, String.class, "TagName", false, "TAG_NAME");
        public final static Property AddressId = new Property(12, String.class, "AddressId", false, "ADDRESS_ID");
        public final static Property AddressName = new Property(13, String.class, "AddressName", false, "ADDRESS_NAME");
        public final static Property AddressNo = new Property(14, String.class, "AddressNo", false, "ADDRESS_NO");
        public final static Property SamplingHeight = new Property(15, String.class, "SamplingHeight", false, "SAMPLING_HEIGHT");
        public final static Property PollutionType = new Property(16, String.class, "PollutionType", false, "POLLUTION_TYPE");
        public final static Property RainType = new Property(17, String.class, "RainType", false, "RAIN_TYPE");
        public final static Property SampProperty = new Property(18, String.class, "SampProperty", false, "SAMP_PROPERTY");
        public final static Property FormType = new Property(19, String.class, "FormType", false, "FORM_TYPE");
        public final static Property FormTypeName = new Property(20, String.class, "FormTypeName", false, "FORM_TYPE_NAME");
        public final static Property DeviceId = new Property(21, String.class, "DeviceId", false, "DEVICE_ID");
        public final static Property DeviceName = new Property(22, String.class, "DeviceName", false, "DEVICE_NAME");
        public final static Property MethodId = new Property(23, String.class, "MethodId", false, "METHOD_ID");
        public final static Property MethodName = new Property(24, String.class, "MethodName", false, "METHOD_NAME");
        public final static Property Weather = new Property(25, String.class, "Weather", false, "WEATHER");
        public final static Property WindSpeed = new Property(26, String.class, "WindSpeed", false, "WIND_SPEED");
        public final static Property Temprature = new Property(27, String.class, "Temprature", false, "TEMPRATURE");
        public final static Property Pressure = new Property(28, String.class, "Pressure", false, "PRESSURE");
        public final static Property CalibrationFactor = new Property(29, String.class, "CalibrationFactor", false, "CALIBRATION_FACTOR");
        public final static Property Transfer = new Property(30, String.class, "Transfer", false, "TRANSFER");
        public final static Property SendSampTime = new Property(31, String.class, "SendSampTime", false, "SEND_SAMP_TIME");
        public final static Property ReciveTime = new Property(32, String.class, "ReciveTime", false, "RECIVE_TIME");
        public final static Property PrivateData = new Property(33, String.class, "PrivateData", false, "PRIVATE_DATA");
        public final static Property SamplingUserId = new Property(34, String.class, "SamplingUserId", false, "SAMPLING_USER_ID");
        public final static Property SamplingUserName = new Property(35, String.class, "SamplingUserName", false, "SAMPLING_USER_NAME");
        public final static Property SubmitId = new Property(36, String.class, "SubmitId", false, "SUBMIT_ID");
        public final static Property SubmitName = new Property(37, String.class, "SubmitName", false, "SUBMIT_NAME");
        public final static Property SubmitDate = new Property(38, String.class, "SubmitDate", false, "SUBMIT_DATE");
        public final static Property MonitorPerson = new Property(39, String.class, "MonitorPerson", false, "MONITOR_PERSON");
        public final static Property MonitorTime = new Property(40, String.class, "MonitorTime", false, "MONITOR_TIME");
        public final static Property Status = new Property(41, int.class, "Status", false, "STATUS");
        public final static Property StatusName = new Property(42, String.class, "StatusName", false, "STATUS_NAME");
        public final static Property TransStatus = new Property(43, int.class, "TransStatus", false, "TRANS_STATUS");
        public final static Property TransStatusName = new Property(44, String.class, "TransStatusName", false, "TRANS_STATUS_NAME");
        public final static Property CurUserId = new Property(45, String.class, "CurUserId", false, "CUR_USER_ID");
        public final static Property CurUserName = new Property(46, String.class, "CurUserName", false, "CUR_USER_NAME");
        public final static Property FormFlows = new Property(47, String.class, "FormFlows", false, "FORM_FLOWS");
        public final static Property Comment = new Property(48, String.class, "Comment", false, "COMMENT");
        public final static Property AddTime = new Property(49, String.class, "AddTime", false, "ADD_TIME");
        public final static Property UpdateTime = new Property(50, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property Version = new Property(51, int.class, "Version", false, "VERSION");
        public final static Property MonitemId = new Property(52, String.class, "MonitemId", false, "MONITEM_ID");
        public final static Property MonitemName = new Property(53, String.class, "MonitemName", false, "MONITEM_NAME");
        public final static Property AuditDate = new Property(54, String.class, "AuditDate", false, "AUDIT_DATE");
        public final static Property Recoding = new Property(55, String.class, "Recoding", false, "RECODING");
        public final static Property ProjectNo = new Property(56, String.class, "ProjectNo", false, "PROJECT_NO");
        public final static Property File = new Property(57, String.class, "file", false, "FILE");
        public final static Property IsUpload = new Property(58, boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property IsLocal = new Property(59, boolean.class, "isLocal", false, "IS_LOCAL");
        public final static Property IsCanEdit = new Property(60, boolean.class, "isCanEdit", false, "IS_CAN_EDIT");
        public final static Property IsFinish = new Property(61, boolean.class, "isFinish", false, "IS_FINISH");
        public final static Property IsUploadSave = new Property(62, boolean.class, "isUploadSave", false, "IS_UPLOAD_SAVE");
        public final static Property LayTableCheckbox = new Property(63, String.class, "layTableCheckbox", false, "LAY_TABLE_CHECKBOX");
        public final static Property DeleteFiles = new Property(64, String.class, "DeleteFiles", false, "DELETE_FILES");
        public final static Property FileIds = new Property(65, String.class, "fileIds", false, "FILE_IDS");
        public final static Property SamplingUserResults = new Property(66, String.class, "SamplingUserResults", false, "SAMPLING_USER_RESULTS");
    }

    private final StringConverter SamplingUserResultsConverter = new StringConverter();

    public SamplingDao(DaoConfig config) {
        super(config);
    }
    
    public SamplingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAMPLING\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"PROJECT_ID\" TEXT," + // 1: ProjectId
                "\"SAMPLING_NO\" TEXT," + // 2: SamplingNo
                "\"FORM_PATH\" TEXT," + // 3: FormPath
                "\"FORM_NAME\" TEXT," + // 4: FormName
                "\"PROJECT_NAME\" TEXT," + // 5: ProjectName
                "\"MONTYPE\" INTEGER NOT NULL ," + // 6: Montype
                "\"SAMPLING_TIME_BEGIN\" TEXT," + // 7: SamplingTimeBegin
                "\"SAMPLING_TIME_END\" TEXT," + // 8: SamplingTimeEnd
                "\"PARENT_TAG_ID\" TEXT," + // 9: ParentTagId
                "\"TAG_ID\" TEXT," + // 10: TagId
                "\"TAG_NAME\" TEXT," + // 11: TagName
                "\"ADDRESS_ID\" TEXT," + // 12: AddressId
                "\"ADDRESS_NAME\" TEXT," + // 13: AddressName
                "\"ADDRESS_NO\" TEXT," + // 14: AddressNo
                "\"SAMPLING_HEIGHT\" TEXT," + // 15: SamplingHeight
                "\"POLLUTION_TYPE\" TEXT," + // 16: PollutionType
                "\"RAIN_TYPE\" TEXT," + // 17: RainType
                "\"SAMP_PROPERTY\" TEXT," + // 18: SampProperty
                "\"FORM_TYPE\" TEXT," + // 19: FormType
                "\"FORM_TYPE_NAME\" TEXT," + // 20: FormTypeName
                "\"DEVICE_ID\" TEXT," + // 21: DeviceId
                "\"DEVICE_NAME\" TEXT," + // 22: DeviceName
                "\"METHOD_ID\" TEXT," + // 23: MethodId
                "\"METHOD_NAME\" TEXT," + // 24: MethodName
                "\"WEATHER\" TEXT," + // 25: Weather
                "\"WIND_SPEED\" TEXT," + // 26: WindSpeed
                "\"TEMPRATURE\" TEXT," + // 27: Temprature
                "\"PRESSURE\" TEXT," + // 28: Pressure
                "\"CALIBRATION_FACTOR\" TEXT," + // 29: CalibrationFactor
                "\"TRANSFER\" TEXT," + // 30: Transfer
                "\"SEND_SAMP_TIME\" TEXT," + // 31: SendSampTime
                "\"RECIVE_TIME\" TEXT," + // 32: ReciveTime
                "\"PRIVATE_DATA\" TEXT," + // 33: PrivateData
                "\"SAMPLING_USER_ID\" TEXT," + // 34: SamplingUserId
                "\"SAMPLING_USER_NAME\" TEXT," + // 35: SamplingUserName
                "\"SUBMIT_ID\" TEXT," + // 36: SubmitId
                "\"SUBMIT_NAME\" TEXT," + // 37: SubmitName
                "\"SUBMIT_DATE\" TEXT," + // 38: SubmitDate
                "\"MONITOR_PERSON\" TEXT," + // 39: MonitorPerson
                "\"MONITOR_TIME\" TEXT," + // 40: MonitorTime
                "\"STATUS\" INTEGER NOT NULL ," + // 41: Status
                "\"STATUS_NAME\" TEXT," + // 42: StatusName
                "\"TRANS_STATUS\" INTEGER NOT NULL ," + // 43: TransStatus
                "\"TRANS_STATUS_NAME\" TEXT," + // 44: TransStatusName
                "\"CUR_USER_ID\" TEXT," + // 45: CurUserId
                "\"CUR_USER_NAME\" TEXT," + // 46: CurUserName
                "\"FORM_FLOWS\" TEXT," + // 47: FormFlows
                "\"COMMENT\" TEXT," + // 48: Comment
                "\"ADD_TIME\" TEXT," + // 49: AddTime
                "\"UPDATE_TIME\" TEXT," + // 50: UpdateTime
                "\"VERSION\" INTEGER NOT NULL ," + // 51: Version
                "\"MONITEM_ID\" TEXT," + // 52: MonitemId
                "\"MONITEM_NAME\" TEXT," + // 53: MonitemName
                "\"AUDIT_DATE\" TEXT," + // 54: AuditDate
                "\"RECODING\" TEXT," + // 55: Recoding
                "\"PROJECT_NO\" TEXT," + // 56: ProjectNo
                "\"FILE\" TEXT," + // 57: file
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 58: isUpload
                "\"IS_LOCAL\" INTEGER NOT NULL ," + // 59: isLocal
                "\"IS_CAN_EDIT\" INTEGER NOT NULL ," + // 60: isCanEdit
                "\"IS_FINISH\" INTEGER NOT NULL ," + // 61: isFinish
                "\"IS_UPLOAD_SAVE\" INTEGER NOT NULL ," + // 62: isUploadSave
                "\"LAY_TABLE_CHECKBOX\" TEXT," + // 63: layTableCheckbox
                "\"DELETE_FILES\" TEXT," + // 64: DeleteFiles
                "\"FILE_IDS\" TEXT," + // 65: fileIds
                "\"SAMPLING_USER_RESULTS\" TEXT);"); // 66: SamplingUserResults
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAMPLING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sampling entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String ProjectId = entity.getProjectId();
        if (ProjectId != null) {
            stmt.bindString(2, ProjectId);
        }
 
        String SamplingNo = entity.getSamplingNo();
        if (SamplingNo != null) {
            stmt.bindString(3, SamplingNo);
        }
 
        String FormPath = entity.getFormPath();
        if (FormPath != null) {
            stmt.bindString(4, FormPath);
        }
 
        String FormName = entity.getFormName();
        if (FormName != null) {
            stmt.bindString(5, FormName);
        }
 
        String ProjectName = entity.getProjectName();
        if (ProjectName != null) {
            stmt.bindString(6, ProjectName);
        }
        stmt.bindLong(7, entity.getMontype());
 
        String SamplingTimeBegin = entity.getSamplingTimeBegin();
        if (SamplingTimeBegin != null) {
            stmt.bindString(8, SamplingTimeBegin);
        }
 
        String SamplingTimeEnd = entity.getSamplingTimeEnd();
        if (SamplingTimeEnd != null) {
            stmt.bindString(9, SamplingTimeEnd);
        }
 
        String ParentTagId = entity.getParentTagId();
        if (ParentTagId != null) {
            stmt.bindString(10, ParentTagId);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(11, TagId);
        }
 
        String TagName = entity.getTagName();
        if (TagName != null) {
            stmt.bindString(12, TagName);
        }
 
        String AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindString(13, AddressId);
        }
 
        String AddressName = entity.getAddressName();
        if (AddressName != null) {
            stmt.bindString(14, AddressName);
        }
 
        String AddressNo = entity.getAddressNo();
        if (AddressNo != null) {
            stmt.bindString(15, AddressNo);
        }
 
        String SamplingHeight = entity.getSamplingHeight();
        if (SamplingHeight != null) {
            stmt.bindString(16, SamplingHeight);
        }
 
        String PollutionType = entity.getPollutionType();
        if (PollutionType != null) {
            stmt.bindString(17, PollutionType);
        }
 
        String RainType = entity.getRainType();
        if (RainType != null) {
            stmt.bindString(18, RainType);
        }
 
        String SampProperty = entity.getSampProperty();
        if (SampProperty != null) {
            stmt.bindString(19, SampProperty);
        }
 
        String FormType = entity.getFormType();
        if (FormType != null) {
            stmt.bindString(20, FormType);
        }
 
        String FormTypeName = entity.getFormTypeName();
        if (FormTypeName != null) {
            stmt.bindString(21, FormTypeName);
        }
 
        String DeviceId = entity.getDeviceId();
        if (DeviceId != null) {
            stmt.bindString(22, DeviceId);
        }
 
        String DeviceName = entity.getDeviceName();
        if (DeviceName != null) {
            stmt.bindString(23, DeviceName);
        }
 
        String MethodId = entity.getMethodId();
        if (MethodId != null) {
            stmt.bindString(24, MethodId);
        }
 
        String MethodName = entity.getMethodName();
        if (MethodName != null) {
            stmt.bindString(25, MethodName);
        }
 
        String Weather = entity.getWeather();
        if (Weather != null) {
            stmt.bindString(26, Weather);
        }
 
        String WindSpeed = entity.getWindSpeed();
        if (WindSpeed != null) {
            stmt.bindString(27, WindSpeed);
        }
 
        String Temprature = entity.getTemprature();
        if (Temprature != null) {
            stmt.bindString(28, Temprature);
        }
 
        String Pressure = entity.getPressure();
        if (Pressure != null) {
            stmt.bindString(29, Pressure);
        }
 
        String CalibrationFactor = entity.getCalibrationFactor();
        if (CalibrationFactor != null) {
            stmt.bindString(30, CalibrationFactor);
        }
 
        String Transfer = entity.getTransfer();
        if (Transfer != null) {
            stmt.bindString(31, Transfer);
        }
 
        String SendSampTime = entity.getSendSampTime();
        if (SendSampTime != null) {
            stmt.bindString(32, SendSampTime);
        }
 
        String ReciveTime = entity.getReciveTime();
        if (ReciveTime != null) {
            stmt.bindString(33, ReciveTime);
        }
 
        String PrivateData = entity.getPrivateData();
        if (PrivateData != null) {
            stmt.bindString(34, PrivateData);
        }
 
        String SamplingUserId = entity.getSamplingUserId();
        if (SamplingUserId != null) {
            stmt.bindString(35, SamplingUserId);
        }
 
        String SamplingUserName = entity.getSamplingUserName();
        if (SamplingUserName != null) {
            stmt.bindString(36, SamplingUserName);
        }
 
        String SubmitId = entity.getSubmitId();
        if (SubmitId != null) {
            stmt.bindString(37, SubmitId);
        }
 
        String SubmitName = entity.getSubmitName();
        if (SubmitName != null) {
            stmt.bindString(38, SubmitName);
        }
 
        String SubmitDate = entity.getSubmitDate();
        if (SubmitDate != null) {
            stmt.bindString(39, SubmitDate);
        }
 
        String MonitorPerson = entity.getMonitorPerson();
        if (MonitorPerson != null) {
            stmt.bindString(40, MonitorPerson);
        }
 
        String MonitorTime = entity.getMonitorTime();
        if (MonitorTime != null) {
            stmt.bindString(41, MonitorTime);
        }
        stmt.bindLong(42, entity.getStatus());
 
        String StatusName = entity.getStatusName();
        if (StatusName != null) {
            stmt.bindString(43, StatusName);
        }
        stmt.bindLong(44, entity.getTransStatus());
 
        String TransStatusName = entity.getTransStatusName();
        if (TransStatusName != null) {
            stmt.bindString(45, TransStatusName);
        }
 
        String CurUserId = entity.getCurUserId();
        if (CurUserId != null) {
            stmt.bindString(46, CurUserId);
        }
 
        String CurUserName = entity.getCurUserName();
        if (CurUserName != null) {
            stmt.bindString(47, CurUserName);
        }
 
        String FormFlows = entity.getFormFlows();
        if (FormFlows != null) {
            stmt.bindString(48, FormFlows);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(49, Comment);
        }
 
        String AddTime = entity.getAddTime();
        if (AddTime != null) {
            stmt.bindString(50, AddTime);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(51, UpdateTime);
        }
        stmt.bindLong(52, entity.getVersion());
 
        String MonitemId = entity.getMonitemId();
        if (MonitemId != null) {
            stmt.bindString(53, MonitemId);
        }
 
        String MonitemName = entity.getMonitemName();
        if (MonitemName != null) {
            stmt.bindString(54, MonitemName);
        }
 
        String AuditDate = entity.getAuditDate();
        if (AuditDate != null) {
            stmt.bindString(55, AuditDate);
        }
 
        String Recoding = entity.getRecoding();
        if (Recoding != null) {
            stmt.bindString(56, Recoding);
        }
 
        String ProjectNo = entity.getProjectNo();
        if (ProjectNo != null) {
            stmt.bindString(57, ProjectNo);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(58, file);
        }
        stmt.bindLong(59, entity.getIsUpload() ? 1L: 0L);
        stmt.bindLong(60, entity.getIsLocal() ? 1L: 0L);
        stmt.bindLong(61, entity.getIsCanEdit() ? 1L: 0L);
        stmt.bindLong(62, entity.getIsFinish() ? 1L: 0L);
        stmt.bindLong(63, entity.getIsUploadSave() ? 1L: 0L);
 
        String layTableCheckbox = entity.getLayTableCheckbox();
        if (layTableCheckbox != null) {
            stmt.bindString(64, layTableCheckbox);
        }
 
        String DeleteFiles = entity.getDeleteFiles();
        if (DeleteFiles != null) {
            stmt.bindString(65, DeleteFiles);
        }
 
        String fileIds = entity.getFileIds();
        if (fileIds != null) {
            stmt.bindString(66, fileIds);
        }
 
        List SamplingUserResults = entity.getSamplingUserResults();
        if (SamplingUserResults != null) {
            stmt.bindString(67, SamplingUserResultsConverter.convertToDatabaseValue(SamplingUserResults));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sampling entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String ProjectId = entity.getProjectId();
        if (ProjectId != null) {
            stmt.bindString(2, ProjectId);
        }
 
        String SamplingNo = entity.getSamplingNo();
        if (SamplingNo != null) {
            stmt.bindString(3, SamplingNo);
        }
 
        String FormPath = entity.getFormPath();
        if (FormPath != null) {
            stmt.bindString(4, FormPath);
        }
 
        String FormName = entity.getFormName();
        if (FormName != null) {
            stmt.bindString(5, FormName);
        }
 
        String ProjectName = entity.getProjectName();
        if (ProjectName != null) {
            stmt.bindString(6, ProjectName);
        }
        stmt.bindLong(7, entity.getMontype());
 
        String SamplingTimeBegin = entity.getSamplingTimeBegin();
        if (SamplingTimeBegin != null) {
            stmt.bindString(8, SamplingTimeBegin);
        }
 
        String SamplingTimeEnd = entity.getSamplingTimeEnd();
        if (SamplingTimeEnd != null) {
            stmt.bindString(9, SamplingTimeEnd);
        }
 
        String ParentTagId = entity.getParentTagId();
        if (ParentTagId != null) {
            stmt.bindString(10, ParentTagId);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(11, TagId);
        }
 
        String TagName = entity.getTagName();
        if (TagName != null) {
            stmt.bindString(12, TagName);
        }
 
        String AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindString(13, AddressId);
        }
 
        String AddressName = entity.getAddressName();
        if (AddressName != null) {
            stmt.bindString(14, AddressName);
        }
 
        String AddressNo = entity.getAddressNo();
        if (AddressNo != null) {
            stmt.bindString(15, AddressNo);
        }
 
        String SamplingHeight = entity.getSamplingHeight();
        if (SamplingHeight != null) {
            stmt.bindString(16, SamplingHeight);
        }
 
        String PollutionType = entity.getPollutionType();
        if (PollutionType != null) {
            stmt.bindString(17, PollutionType);
        }
 
        String RainType = entity.getRainType();
        if (RainType != null) {
            stmt.bindString(18, RainType);
        }
 
        String SampProperty = entity.getSampProperty();
        if (SampProperty != null) {
            stmt.bindString(19, SampProperty);
        }
 
        String FormType = entity.getFormType();
        if (FormType != null) {
            stmt.bindString(20, FormType);
        }
 
        String FormTypeName = entity.getFormTypeName();
        if (FormTypeName != null) {
            stmt.bindString(21, FormTypeName);
        }
 
        String DeviceId = entity.getDeviceId();
        if (DeviceId != null) {
            stmt.bindString(22, DeviceId);
        }
 
        String DeviceName = entity.getDeviceName();
        if (DeviceName != null) {
            stmt.bindString(23, DeviceName);
        }
 
        String MethodId = entity.getMethodId();
        if (MethodId != null) {
            stmt.bindString(24, MethodId);
        }
 
        String MethodName = entity.getMethodName();
        if (MethodName != null) {
            stmt.bindString(25, MethodName);
        }
 
        String Weather = entity.getWeather();
        if (Weather != null) {
            stmt.bindString(26, Weather);
        }
 
        String WindSpeed = entity.getWindSpeed();
        if (WindSpeed != null) {
            stmt.bindString(27, WindSpeed);
        }
 
        String Temprature = entity.getTemprature();
        if (Temprature != null) {
            stmt.bindString(28, Temprature);
        }
 
        String Pressure = entity.getPressure();
        if (Pressure != null) {
            stmt.bindString(29, Pressure);
        }
 
        String CalibrationFactor = entity.getCalibrationFactor();
        if (CalibrationFactor != null) {
            stmt.bindString(30, CalibrationFactor);
        }
 
        String Transfer = entity.getTransfer();
        if (Transfer != null) {
            stmt.bindString(31, Transfer);
        }
 
        String SendSampTime = entity.getSendSampTime();
        if (SendSampTime != null) {
            stmt.bindString(32, SendSampTime);
        }
 
        String ReciveTime = entity.getReciveTime();
        if (ReciveTime != null) {
            stmt.bindString(33, ReciveTime);
        }
 
        String PrivateData = entity.getPrivateData();
        if (PrivateData != null) {
            stmt.bindString(34, PrivateData);
        }
 
        String SamplingUserId = entity.getSamplingUserId();
        if (SamplingUserId != null) {
            stmt.bindString(35, SamplingUserId);
        }
 
        String SamplingUserName = entity.getSamplingUserName();
        if (SamplingUserName != null) {
            stmt.bindString(36, SamplingUserName);
        }
 
        String SubmitId = entity.getSubmitId();
        if (SubmitId != null) {
            stmt.bindString(37, SubmitId);
        }
 
        String SubmitName = entity.getSubmitName();
        if (SubmitName != null) {
            stmt.bindString(38, SubmitName);
        }
 
        String SubmitDate = entity.getSubmitDate();
        if (SubmitDate != null) {
            stmt.bindString(39, SubmitDate);
        }
 
        String MonitorPerson = entity.getMonitorPerson();
        if (MonitorPerson != null) {
            stmt.bindString(40, MonitorPerson);
        }
 
        String MonitorTime = entity.getMonitorTime();
        if (MonitorTime != null) {
            stmt.bindString(41, MonitorTime);
        }
        stmt.bindLong(42, entity.getStatus());
 
        String StatusName = entity.getStatusName();
        if (StatusName != null) {
            stmt.bindString(43, StatusName);
        }
        stmt.bindLong(44, entity.getTransStatus());
 
        String TransStatusName = entity.getTransStatusName();
        if (TransStatusName != null) {
            stmt.bindString(45, TransStatusName);
        }
 
        String CurUserId = entity.getCurUserId();
        if (CurUserId != null) {
            stmt.bindString(46, CurUserId);
        }
 
        String CurUserName = entity.getCurUserName();
        if (CurUserName != null) {
            stmt.bindString(47, CurUserName);
        }
 
        String FormFlows = entity.getFormFlows();
        if (FormFlows != null) {
            stmt.bindString(48, FormFlows);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(49, Comment);
        }
 
        String AddTime = entity.getAddTime();
        if (AddTime != null) {
            stmt.bindString(50, AddTime);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(51, UpdateTime);
        }
        stmt.bindLong(52, entity.getVersion());
 
        String MonitemId = entity.getMonitemId();
        if (MonitemId != null) {
            stmt.bindString(53, MonitemId);
        }
 
        String MonitemName = entity.getMonitemName();
        if (MonitemName != null) {
            stmt.bindString(54, MonitemName);
        }
 
        String AuditDate = entity.getAuditDate();
        if (AuditDate != null) {
            stmt.bindString(55, AuditDate);
        }
 
        String Recoding = entity.getRecoding();
        if (Recoding != null) {
            stmt.bindString(56, Recoding);
        }
 
        String ProjectNo = entity.getProjectNo();
        if (ProjectNo != null) {
            stmt.bindString(57, ProjectNo);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(58, file);
        }
        stmt.bindLong(59, entity.getIsUpload() ? 1L: 0L);
        stmt.bindLong(60, entity.getIsLocal() ? 1L: 0L);
        stmt.bindLong(61, entity.getIsCanEdit() ? 1L: 0L);
        stmt.bindLong(62, entity.getIsFinish() ? 1L: 0L);
        stmt.bindLong(63, entity.getIsUploadSave() ? 1L: 0L);
 
        String layTableCheckbox = entity.getLayTableCheckbox();
        if (layTableCheckbox != null) {
            stmt.bindString(64, layTableCheckbox);
        }
 
        String DeleteFiles = entity.getDeleteFiles();
        if (DeleteFiles != null) {
            stmt.bindString(65, DeleteFiles);
        }
 
        String fileIds = entity.getFileIds();
        if (fileIds != null) {
            stmt.bindString(66, fileIds);
        }
 
        List SamplingUserResults = entity.getSamplingUserResults();
        if (SamplingUserResults != null) {
            stmt.bindString(67, SamplingUserResultsConverter.convertToDatabaseValue(SamplingUserResults));
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Sampling readEntity(Cursor cursor, int offset) {
        Sampling entity = new Sampling( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ProjectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SamplingNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FormPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FormName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ProjectName
            cursor.getInt(offset + 6), // Montype
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SamplingTimeBegin
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SamplingTimeEnd
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ParentTagId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // TagId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // TagName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // AddressId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // AddressName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // AddressNo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // SamplingHeight
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // PollutionType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // RainType
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // SampProperty
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // FormType
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // FormTypeName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // DeviceId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // DeviceName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // MethodId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // MethodName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // Weather
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // WindSpeed
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // Temprature
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // Pressure
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // CalibrationFactor
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // Transfer
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // SendSampTime
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // ReciveTime
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // PrivateData
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // SamplingUserId
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // SamplingUserName
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // SubmitId
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // SubmitName
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // SubmitDate
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // MonitorPerson
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // MonitorTime
            cursor.getInt(offset + 41), // Status
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // StatusName
            cursor.getInt(offset + 43), // TransStatus
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // TransStatusName
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // CurUserId
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // CurUserName
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // FormFlows
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // Comment
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // AddTime
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // UpdateTime
            cursor.getInt(offset + 51), // Version
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // MonitemId
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // MonitemName
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // AuditDate
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // Recoding
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // ProjectNo
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // file
            cursor.getShort(offset + 58) != 0, // isUpload
            cursor.getShort(offset + 59) != 0, // isLocal
            cursor.getShort(offset + 60) != 0, // isCanEdit
            cursor.getShort(offset + 61) != 0, // isFinish
            cursor.getShort(offset + 62) != 0, // isUploadSave
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // layTableCheckbox
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // DeleteFiles
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // fileIds
            cursor.isNull(offset + 66) ? null : SamplingUserResultsConverter.convertToEntityProperty(cursor.getString(offset + 66)) // SamplingUserResults
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sampling entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSamplingNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFormPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFormName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProjectName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMontype(cursor.getInt(offset + 6));
        entity.setSamplingTimeBegin(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSamplingTimeEnd(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setParentTagId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTagId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTagName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddressId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAddressName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAddressNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSamplingHeight(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPollutionType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRainType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSampProperty(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFormType(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFormTypeName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDeviceId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDeviceName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setMethodId(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setMethodName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setWeather(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setWindSpeed(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setTemprature(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPressure(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setCalibrationFactor(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setTransfer(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setSendSampTime(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setReciveTime(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setPrivateData(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setSamplingUserId(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setSamplingUserName(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setSubmitId(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setSubmitName(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setSubmitDate(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setMonitorPerson(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setMonitorTime(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setStatus(cursor.getInt(offset + 41));
        entity.setStatusName(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setTransStatus(cursor.getInt(offset + 43));
        entity.setTransStatusName(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setCurUserId(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setCurUserName(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setFormFlows(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setComment(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setAddTime(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setUpdateTime(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setVersion(cursor.getInt(offset + 51));
        entity.setMonitemId(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setMonitemName(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setAuditDate(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setRecoding(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setProjectNo(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setFile(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setIsUpload(cursor.getShort(offset + 58) != 0);
        entity.setIsLocal(cursor.getShort(offset + 59) != 0);
        entity.setIsCanEdit(cursor.getShort(offset + 60) != 0);
        entity.setIsFinish(cursor.getShort(offset + 61) != 0);
        entity.setIsUploadSave(cursor.getShort(offset + 62) != 0);
        entity.setLayTableCheckbox(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setDeleteFiles(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setFileIds(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setSamplingUserResults(cursor.isNull(offset + 66) ? null : SamplingUserResultsConverter.convertToEntityProperty(cursor.getString(offset + 66)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Sampling entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Sampling entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sampling entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
