package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.base.Rights;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RIGHTS".
*/
public class RightsDao extends AbstractDao<Rights, Void> {

    public static final String TABLENAME = "RIGHTS";

    /**
     * Properties of entity Rights.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property EnumName = new Property(0, String.class, "EnumName", false, "ENUM_NAME");
        public final static Property EnumValue = new Property(1, int.class, "EnumValue", false, "ENUM_VALUE");
    }


    public RightsDao(DaoConfig config) {
        super(config);
    }
    
    public RightsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RIGHTS\" (" + //
                "\"ENUM_NAME\" TEXT," + // 0: EnumName
                "\"ENUM_VALUE\" INTEGER NOT NULL );"); // 1: EnumValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RIGHTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Rights entity) {
        stmt.clearBindings();
 
        String EnumName = entity.getEnumName();
        if (EnumName != null) {
            stmt.bindString(1, EnumName);
        }
        stmt.bindLong(2, entity.getEnumValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Rights entity) {
        stmt.clearBindings();
 
        String EnumName = entity.getEnumName();
        if (EnumName != null) {
            stmt.bindString(1, EnumName);
        }
        stmt.bindLong(2, entity.getEnumValue());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Rights readEntity(Cursor cursor, int offset) {
        Rights entity = new Rights( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // EnumName
            cursor.getInt(offset + 1) // EnumValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Rights entity, int offset) {
        entity.setEnumName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEnumValue(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Rights entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Rights entity) {
        return null;
    }

    @Override
    public boolean hasKey(Rights entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
