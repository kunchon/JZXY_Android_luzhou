package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.gps.GpsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GPS_BEAN".
*/
public class GpsBeanDao extends AbstractDao<GpsBean, String> {

    public static final String TABLENAME = "GPS_BEAN";

    /**
     * Properties of entity GpsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CoordType = new Property(1, String.class, "coordType", false, "COORD_TYPE");
        public final static Property Longitude = new Property(2, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(3, double.class, "latitude", false, "LATITUDE");
        public final static Property LocType = new Property(4, String.class, "locType", false, "LOC_TYPE");
        public final static Property CollectionTime = new Property(5, String.class, "collectionTime", false, "COLLECTION_TIME");
    }


    public GpsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GpsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GPS_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"COORD_TYPE\" TEXT," + // 1: coordType
                "\"LONGITUDE\" REAL NOT NULL ," + // 2: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 3: latitude
                "\"LOC_TYPE\" TEXT," + // 4: locType
                "\"COLLECTION_TIME\" TEXT);"); // 5: collectionTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GPS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GpsBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String coordType = entity.getCoordType();
        if (coordType != null) {
            stmt.bindString(2, coordType);
        }
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
 
        String locType = entity.getLocType();
        if (locType != null) {
            stmt.bindString(5, locType);
        }
 
        String collectionTime = entity.getCollectionTime();
        if (collectionTime != null) {
            stmt.bindString(6, collectionTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GpsBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String coordType = entity.getCoordType();
        if (coordType != null) {
            stmt.bindString(2, coordType);
        }
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
 
        String locType = entity.getLocType();
        if (locType != null) {
            stmt.bindString(5, locType);
        }
 
        String collectionTime = entity.getCollectionTime();
        if (collectionTime != null) {
            stmt.bindString(6, collectionTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GpsBean readEntity(Cursor cursor, int offset) {
        GpsBean entity = new GpsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // coordType
            cursor.getDouble(offset + 2), // longitude
            cursor.getDouble(offset + 3), // latitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // locType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // collectionTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GpsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCoordType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLongitude(cursor.getDouble(offset + 2));
        entity.setLatitude(cursor.getDouble(offset + 3));
        entity.setLocType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCollectionTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GpsBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(GpsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GpsBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
