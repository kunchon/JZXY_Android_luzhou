package cn.cdjzxy.android.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.android.monitoringassistant.mvp.model.entity.base.EnterRelatePoint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTER_RELATE_POINT".
*/
public class EnterRelatePointDao extends AbstractDao<EnterRelatePoint, String> {

    public static final String TABLENAME = "ENTER_RELATE_POINT";

    /**
     * Properties of entity EnterRelatePoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property EnterPriseId = new Property(1, String.class, "EnterPriseId", false, "ENTER_PRISE_ID");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property Code = new Property(3, String.class, "Code", false, "CODE");
        public final static Property Longtitude = new Property(4, double.class, "Longtitude", false, "LONGTITUDE");
        public final static Property Latitude = new Property(5, double.class, "Latitude", false, "LATITUDE");
        public final static Property TagId = new Property(6, String.class, "TagId", false, "TAG_ID");
        public final static Property TagName = new Property(7, String.class, "TagName", false, "TAG_NAME");
        public final static Property UpdateTime = new Property(8, String.class, "UpdateTime", false, "UPDATE_TIME");
    }


    public EnterRelatePointDao(DaoConfig config) {
        super(config);
    }
    
    public EnterRelatePointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTER_RELATE_POINT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"ENTER_PRISE_ID\" TEXT," + // 1: EnterPriseId
                "\"NAME\" TEXT," + // 2: Name
                "\"CODE\" TEXT," + // 3: Code
                "\"LONGTITUDE\" REAL NOT NULL ," + // 4: Longtitude
                "\"LATITUDE\" REAL NOT NULL ," + // 5: Latitude
                "\"TAG_ID\" TEXT," + // 6: TagId
                "\"TAG_NAME\" TEXT," + // 7: TagName
                "\"UPDATE_TIME\" TEXT);"); // 8: UpdateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTER_RELATE_POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EnterRelatePoint entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String EnterPriseId = entity.getEnterPriseId();
        if (EnterPriseId != null) {
            stmt.bindString(2, EnterPriseId);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String Code = entity.getCode();
        if (Code != null) {
            stmt.bindString(4, Code);
        }
        stmt.bindDouble(5, entity.getLongtitude());
        stmt.bindDouble(6, entity.getLatitude());
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(7, TagId);
        }
 
        String TagName = entity.getTagName();
        if (TagName != null) {
            stmt.bindString(8, TagName);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(9, UpdateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EnterRelatePoint entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String EnterPriseId = entity.getEnterPriseId();
        if (EnterPriseId != null) {
            stmt.bindString(2, EnterPriseId);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String Code = entity.getCode();
        if (Code != null) {
            stmt.bindString(4, Code);
        }
        stmt.bindDouble(5, entity.getLongtitude());
        stmt.bindDouble(6, entity.getLatitude());
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(7, TagId);
        }
 
        String TagName = entity.getTagName();
        if (TagName != null) {
            stmt.bindString(8, TagName);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(9, UpdateTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public EnterRelatePoint readEntity(Cursor cursor, int offset) {
        EnterRelatePoint entity = new EnterRelatePoint( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // EnterPriseId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Code
            cursor.getDouble(offset + 4), // Longtitude
            cursor.getDouble(offset + 5), // Latitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TagId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // TagName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // UpdateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EnterRelatePoint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEnterPriseId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongtitude(cursor.getDouble(offset + 4));
        entity.setLatitude(cursor.getDouble(offset + 5));
        entity.setTagId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTagName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(EnterRelatePoint entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(EnterRelatePoint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EnterRelatePoint entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
